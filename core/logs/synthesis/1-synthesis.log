
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /Business/EDA_wx_company/jli/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/core/src/core.v
Parsing SystemVerilog input from `/openlane/designs/core/src/core.v' to AST representation.
Storing AST representation for module `$abstract\BHT'.
Storing AST representation for module `$abstract\BTB'.
Storing AST representation for module `$abstract\Fetch'.
Storing AST representation for module `$abstract\Control'.
Storing AST representation for module `$abstract\Regfile'.
Storing AST representation for module `$abstract\ImmGen'.
Storing AST representation for module `$abstract\Decode'.
Storing AST representation for module `$abstract\AluSelect'.
Storing AST representation for module `$abstract\ALU'.
Storing AST representation for module `$abstract\TargetGen'.
Storing AST representation for module `$abstract\Execute'.
Storing AST representation for module `$abstract\Branch'.
Storing AST representation for module `$abstract\Memory'.
Storing AST representation for module `$abstract\Writeback'.
Storing AST representation for module `$abstract\CSR'.
Storing AST representation for module `$abstract\Hazard'.
Storing AST representation for module `$abstract\core'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\core'.
Generating RTLIL representation for module `\core'.

4.1. Analyzing design hierarchy..
Top module:  \core

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Hazard'.
Generating RTLIL representation for module `\Hazard'.

4.3. Executing AST frontend in derive mode using pre-parsed AST for module `\CSR'.
Generating RTLIL representation for module `\CSR'.

4.4. Executing AST frontend in derive mode using pre-parsed AST for module `\Writeback'.
Generating RTLIL representation for module `\Writeback'.

4.5. Executing AST frontend in derive mode using pre-parsed AST for module `\Memory'.
Generating RTLIL representation for module `\Memory'.

4.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Execute'.
Generating RTLIL representation for module `\Execute'.

4.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Decode'.
Generating RTLIL representation for module `\Decode'.

4.8. Executing AST frontend in derive mode using pre-parsed AST for module `\Fetch'.
Generating RTLIL representation for module `\Fetch'.

4.9. Analyzing design hierarchy..
Top module:  \core
Used module:     \Hazard
Used module:     \CSR
Used module:     \Writeback
Used module:     \Memory
Used module:     \Execute
Used module:     \Decode
Used module:     \Fetch

4.10. Executing AST frontend in derive mode using pre-parsed AST for module `\BTB'.
Generating RTLIL representation for module `\BTB'.

4.11. Executing AST frontend in derive mode using pre-parsed AST for module `\BHT'.
Generating RTLIL representation for module `\BHT'.

4.12. Executing AST frontend in derive mode using pre-parsed AST for module `\ImmGen'.
Generating RTLIL representation for module `\ImmGen'.

4.13. Executing AST frontend in derive mode using pre-parsed AST for module `\Regfile'.
Generating RTLIL representation for module `\Regfile'.

4.14. Executing AST frontend in derive mode using pre-parsed AST for module `\Control'.
Generating RTLIL representation for module `\Control'.

4.15. Executing AST frontend in derive mode using pre-parsed AST for module `\TargetGen'.
Generating RTLIL representation for module `\TargetGen'.

4.16. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

4.17. Executing AST frontend in derive mode using pre-parsed AST for module `\AluSelect'.
Generating RTLIL representation for module `\AluSelect'.

4.18. Executing AST frontend in derive mode using pre-parsed AST for module `\Branch'.
Generating RTLIL representation for module `\Branch'.

4.19. Analyzing design hierarchy..
Top module:  \core
Used module:     \Hazard
Used module:     \CSR
Used module:     \Writeback
Used module:     \Memory
Used module:         \Branch
Used module:     \Execute
Used module:         \TargetGen
Used module:         \ALU
Used module:         \AluSelect
Used module:     \Decode
Used module:         \ImmGen
Used module:         \Regfile
Used module:         \Control
Used module:     \Fetch
Used module:         \BTB
Used module:         \BHT

4.20. Analyzing design hierarchy..
Top module:  \core
Used module:     \Hazard
Used module:     \CSR
Used module:     \Writeback
Used module:     \Memory
Used module:         \Branch
Used module:     \Execute
Used module:         \TargetGen
Used module:         \ALU
Used module:         \AluSelect
Used module:     \Decode
Used module:         \ImmGen
Used module:         \Regfile
Used module:         \Control
Used module:     \Fetch
Used module:         \BTB
Used module:         \BHT
Removing unused module `$abstract\core'.
Removing unused module `$abstract\Hazard'.
Removing unused module `$abstract\CSR'.
Removing unused module `$abstract\Writeback'.
Removing unused module `$abstract\Memory'.
Removing unused module `$abstract\Branch'.
Removing unused module `$abstract\Execute'.
Removing unused module `$abstract\TargetGen'.
Removing unused module `$abstract\ALU'.
Removing unused module `$abstract\AluSelect'.
Removing unused module `$abstract\Decode'.
Removing unused module `$abstract\ImmGen'.
Removing unused module `$abstract\Regfile'.
Removing unused module `$abstract\Control'.
Removing unused module `$abstract\Fetch'.
Removing unused module `$abstract\BTB'.
Removing unused module `$abstract\BHT'.
Removed 17 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/core/runs/core/tmp/synthesis/hierarchy.dot'.
Dumping module core to page 1.
Renaming module core to core.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \core
Used module:     \Hazard
Used module:     \CSR
Used module:     \Writeback
Used module:     \Memory
Used module:         \Branch
Used module:     \Execute
Used module:         \TargetGen
Used module:         \ALU
Used module:         \AluSelect
Used module:     \Decode
Used module:         \ImmGen
Used module:         \Regfile
Used module:         \Control
Used module:     \Fetch
Used module:         \BTB
Used module:         \BHT

7.2. Analyzing design hierarchy..
Top module:  \core
Used module:     \Hazard
Used module:     \CSR
Used module:     \Writeback
Used module:     \Memory
Used module:         \Branch
Used module:     \Execute
Used module:         \TargetGen
Used module:         \ALU
Used module:         \AluSelect
Used module:     \Decode
Used module:         \ImmGen
Used module:         \Regfile
Used module:         \Control
Used module:     \Fetch
Used module:         \BTB
Used module:         \BHT
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 32 switch rules as full_case in process $proc$/openlane/designs/core/src/core.v:629$764 in module Regfile.
Marked 3 switch rules as full_case in process $proc$/openlane/designs/core/src/core.v:64$577 in module BHT.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/core/src/core.v:192$555 in module BTB.
Marked 8 switch rules as full_case in process $proc$/openlane/designs/core/src/core.v:323$530 in module Fetch.
Marked 58 switch rules as full_case in process $proc$/openlane/designs/core/src/core.v:1281$516 in module Decode.
Marked 45 switch rules as full_case in process $proc$/openlane/designs/core/src/core.v:1866$361 in module Execute.
Marked 28 switch rules as full_case in process $proc$/openlane/designs/core/src/core.v:2287$338 in module Memory.
Marked 33 switch rules as full_case in process $proc$/openlane/designs/core/src/core.v:2638$251 in module CSR.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 75 redundant assignments.
Promoted 16 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~293 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
     1/32: $0\registers_31[31:0]
     2/32: $0\registers_30[31:0]
     3/32: $0\registers_29[31:0]
     4/32: $0\registers_28[31:0]
     5/32: $0\registers_27[31:0]
     6/32: $0\registers_26[31:0]
     7/32: $0\registers_25[31:0]
     8/32: $0\registers_24[31:0]
     9/32: $0\registers_23[31:0]
    10/32: $0\registers_22[31:0]
    11/32: $0\registers_21[31:0]
    12/32: $0\registers_20[31:0]
    13/32: $0\registers_19[31:0]
    14/32: $0\registers_18[31:0]
    15/32: $0\registers_17[31:0]
    16/32: $0\registers_16[31:0]
    17/32: $0\registers_15[31:0]
    18/32: $0\registers_14[31:0]
    19/32: $0\registers_13[31:0]
    20/32: $0\registers_12[31:0]
    21/32: $0\registers_11[31:0]
    22/32: $0\registers_10[31:0]
    23/32: $0\registers_9[31:0]
    24/32: $0\registers_8[31:0]
    25/32: $0\registers_7[31:0]
    26/32: $0\registers_6[31:0]
    27/32: $0\registers_5[31:0]
    28/32: $0\registers_4[31:0]
    29/32: $0\registers_3[31:0]
    30/32: $0\registers_2[31:0]
    31/32: $0\registers_1[31:0]
    32/32: $0\registers_0[31:0]
Creating decoders for process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
     1/9: $1$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$598
     2/9: $1$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_DATA[31:0]$597
     3/9: $1$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_ADDR[3:0]$596
     4/9: $1$memwr$\bhtTable_valid$/openlane/designs/core/src/core.v:69$571_EN[0:0]$594
     5/9: $1$memwr$\bhtTable_valid$/openlane/designs/core/src/core.v:69$571_DATA[0:0]$593
     6/9: $1$memwr$\bhtTable_valid$/openlane/designs/core/src/core.v:69$571_ADDR[3:0]$592
     7/9: $1$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$590
     8/9: $1$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_DATA[25:0]$589
     9/9: $1$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_ADDR[3:0]$588
Creating decoders for process `\BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
     1/6: $1$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_EN[1:0]$569
     2/6: $1$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_DATA[1:0]$568
     3/6: $1$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_ADDR[3:0]$567
     4/6: $1$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_EN[1:0]$565
     5/6: $1$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_DATA[1:0]$564
     6/6: $1$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_ADDR[3:0]$563
Creating decoders for process `\Fetch.$proc$/openlane/designs/core/src/core.v:323$530'.
     1/3: $0\pcReg[31:0]
     2/3: $0\instReg[31:0]
     3/3: $0\idPcReg[31:0]
Creating decoders for process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
     1/28: $0\id_ex_ex_use_rs2_reg[0:0]
     2/28: $0\id_ex_ex_use_rs1_reg[0:0]
     3/28: $0\id_ex_ex_rd_reg[4:0]
     4/28: $0\id_ex_ex_rs2_reg[4:0]
     5/28: $0\id_ex_ex_rs1_reg[4:0]
     6/28: $0\id_ex_funct3_reg[2:0]
     7/28: $0\id_ex_imm_reg[31:0]
     8/28: $0\id_ex_rs2_data_reg[31:0]
     9/28: $0\id_ex_rs1_data_reg[31:0]
    10/28: $0\id_ex_islui_reg[0:0]
    11/28: $0\id_ex_isjump_reg[0:0]
    12/28: $0\id_ex_rdsel_reg[0:0]
    13/28: $0\id_ex_pcsel_reg[0:0]
    14/28: $0\id_ex_memtoreg_reg[1:0]
    15/28: $0\id_ex_regwrite_reg[0:0]
    16/28: $0\id_ex_memwrite_reg[0:0]
    17/28: $0\id_ex_memread_reg[0:0]
    18/28: $0\id_ex_isbranch_reg[0:0]
    19/28: $0\id_ex_immsrc_reg[0:0]
    20/28: $0\id_ex_aluop_reg[3:0]
    21/28: $0\id_ex_pc_reg[31:0]
    22/28: $0\wfi_out_reg[0:0]
    23/28: $0\mret_out_reg[0:0]
    24/28: $0\exception_out_reg[0:0]
    25/28: $0\ecause_out_reg[3:0]
    26/28: $0\csr_address_reg[11:0]
    27/28: $0\csr_write_reg[0:0]
    28/28: $0\csr_read_reg[0:0]
Creating decoders for process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
     1/21: $0\mem_rd_reg[4:0]
     2/21: $0\mem_rs2_data_reg[31:0]
     3/21: $0\mem_aluresult_reg[31:0]
     4/21: $0\mem_zero_reg[0:0]
     5/21: $0\mem_memtoreg_reg[1:0]
     6/21: $0\mem_regwrite_reg[0:0]
     7/21: $0\mem_memwrite_reg[0:0]
     8/21: $0\mem_memread_reg[0:0]
     9/21: $0\mem_isjump_reg[0:0]
    10/21: $0\mem_isbranch_reg[0:0]
    11/21: $0\mem_pc_reg[31:0]
    12/21: $0\target_pc_reg[31:0]
    13/21: $0\reg_pc_reg[31:0]
    14/21: $0\csr_write_data_out_reg[31:0]
    15/21: $0\csr_write_address_out_reg[11:0]
    16/21: $0\csr_write_enable_out_reg[0:0]
    17/21: $0\csr_read_data_out_reg[31:0]
    18/21: $0\exception_out_reg[0:0]
    19/21: $0\ecause_out_reg[3:0]
    20/21: $0\wfi_out_reg[0:0]
    21/21: $0\mret_out_reg[0:0]
Creating decoders for process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
     1/17: $0\branch_reg[0:0]
     2/17: $0\pcsrc_reg[0:0]
     3/17: $0\wb_rd_reg[4:0]
     4/17: $0\wb_regwrite_reg[0:0]
     5/17: $0\wb_memtoreg_reg[1:0]
     6/17: $0\wb_aluresult_reg[31:0]
     7/17: $0\wb_readdata_reg[31:0]
     8/17: $0\wb_reg_pc_reg[31:0]
     9/17: $0\mret_out_reg[0:0]
    10/17: $0\csr_read_data_out_reg[31:0]
    11/17: $0\inst_retired_reg[0:0]
    12/17: $0\interrupt_reg[0:0]
    13/17: $0\trapped_reg[0:0]
    14/17: $0\ecause_out_reg[3:0]
    15/17: $0\csr_write_data_out_reg[31:0]
    16/17: $0\csr_write_address_out_reg[11:0]
    17/17: $0\csr_write_enable_out_reg[0:0]
Creating decoders for process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
     1/14: $0\mtip[0:0]
     2/14: $0\ie[0:0]
     3/14: $0\pie[0:0]
     4/14: $0\minterrupt[0:0]
     5/14: $0\mcause[3:0]
     6/14: $0\mepc[31:0]
     7/14: $0\minstret[63:0]
     8/14: $0\mcycle[63:0]
     9/14: $0\mtie[0:0]
    10/14: $0\msip[0:0]
    11/14: $0\msie[0:0]
    12/14: $0\meie[0:0]
    13/14: $0\mtvec[31:0]
    14/14: $0\mscratch[31:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\Regfile.\registers_0' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1946' with positive edge clock.
Creating register for signal `\Regfile.\registers_1' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1947' with positive edge clock.
Creating register for signal `\Regfile.\registers_2' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1948' with positive edge clock.
Creating register for signal `\Regfile.\registers_3' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1949' with positive edge clock.
Creating register for signal `\Regfile.\registers_4' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1950' with positive edge clock.
Creating register for signal `\Regfile.\registers_5' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1951' with positive edge clock.
Creating register for signal `\Regfile.\registers_6' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1952' with positive edge clock.
Creating register for signal `\Regfile.\registers_7' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1953' with positive edge clock.
Creating register for signal `\Regfile.\registers_8' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1954' with positive edge clock.
Creating register for signal `\Regfile.\registers_9' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1955' with positive edge clock.
Creating register for signal `\Regfile.\registers_10' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1956' with positive edge clock.
Creating register for signal `\Regfile.\registers_11' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1957' with positive edge clock.
Creating register for signal `\Regfile.\registers_12' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1958' with positive edge clock.
Creating register for signal `\Regfile.\registers_13' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1959' with positive edge clock.
Creating register for signal `\Regfile.\registers_14' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1960' with positive edge clock.
Creating register for signal `\Regfile.\registers_15' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1961' with positive edge clock.
Creating register for signal `\Regfile.\registers_16' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1962' with positive edge clock.
Creating register for signal `\Regfile.\registers_17' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1963' with positive edge clock.
Creating register for signal `\Regfile.\registers_18' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1964' with positive edge clock.
Creating register for signal `\Regfile.\registers_19' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1965' with positive edge clock.
Creating register for signal `\Regfile.\registers_20' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1966' with positive edge clock.
Creating register for signal `\Regfile.\registers_21' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1967' with positive edge clock.
Creating register for signal `\Regfile.\registers_22' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1968' with positive edge clock.
Creating register for signal `\Regfile.\registers_23' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1969' with positive edge clock.
Creating register for signal `\Regfile.\registers_24' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1970' with positive edge clock.
Creating register for signal `\Regfile.\registers_25' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1971' with positive edge clock.
Creating register for signal `\Regfile.\registers_26' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1972' with positive edge clock.
Creating register for signal `\Regfile.\registers_27' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1973' with positive edge clock.
Creating register for signal `\Regfile.\registers_28' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1974' with positive edge clock.
Creating register for signal `\Regfile.\registers_29' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1975' with positive edge clock.
Creating register for signal `\Regfile.\registers_30' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1976' with positive edge clock.
Creating register for signal `\Regfile.\registers_31' using process `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
  created $dff cell `$procdff$1977' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_ADDR' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1978' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_DATA' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1979' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1980' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_valid$/openlane/designs/core/src/core.v:69$571_ADDR' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1981' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_valid$/openlane/designs/core/src/core.v:69$571_DATA' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1982' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_valid$/openlane/designs/core/src/core.v:69$571_EN' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1983' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_ADDR' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1984' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_DATA' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1985' with positive edge clock.
Creating register for signal `\BHT.$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN' using process `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
  created $dff cell `$procdff$1986' with positive edge clock.
Creating register for signal `\BTB.$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_ADDR' using process `\BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
  created $dff cell `$procdff$1987' with positive edge clock.
Creating register for signal `\BTB.$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_DATA' using process `\BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
  created $dff cell `$procdff$1988' with positive edge clock.
Creating register for signal `\BTB.$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_EN' using process `\BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
  created $dff cell `$procdff$1989' with positive edge clock.
Creating register for signal `\BTB.$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_ADDR' using process `\BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
  created $dff cell `$procdff$1990' with positive edge clock.
Creating register for signal `\BTB.$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_DATA' using process `\BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
  created $dff cell `$procdff$1991' with positive edge clock.
Creating register for signal `\BTB.$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_EN' using process `\BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
  created $dff cell `$procdff$1992' with positive edge clock.
Creating register for signal `\Fetch.\pcReg' using process `\Fetch.$proc$/openlane/designs/core/src/core.v:323$530'.
  created $dff cell `$procdff$1993' with positive edge clock.
Creating register for signal `\Fetch.\idPcReg' using process `\Fetch.$proc$/openlane/designs/core/src/core.v:323$530'.
  created $dff cell `$procdff$1994' with positive edge clock.
Creating register for signal `\Fetch.\instReg' using process `\Fetch.$proc$/openlane/designs/core/src/core.v:323$530'.
  created $dff cell `$procdff$1995' with positive edge clock.
Creating register for signal `\Decode.\ecause_out_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$1996' with positive edge clock.
Creating register for signal `\Decode.\mret_out_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$1997' with positive edge clock.
Creating register for signal `\Decode.\wfi_out_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$1998' with positive edge clock.
Creating register for signal `\Decode.\exception_out_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$1999' with positive edge clock.
Creating register for signal `\Decode.\csr_read_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2000' with positive edge clock.
Creating register for signal `\Decode.\csr_write_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2001' with positive edge clock.
Creating register for signal `\Decode.\csr_address_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2002' with positive edge clock.
Creating register for signal `\Decode.\id_ex_pc_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2003' with positive edge clock.
Creating register for signal `\Decode.\id_ex_aluop_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2004' with positive edge clock.
Creating register for signal `\Decode.\id_ex_immsrc_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2005' with positive edge clock.
Creating register for signal `\Decode.\id_ex_isbranch_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2006' with positive edge clock.
Creating register for signal `\Decode.\id_ex_memread_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2007' with positive edge clock.
Creating register for signal `\Decode.\id_ex_memwrite_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2008' with positive edge clock.
Creating register for signal `\Decode.\id_ex_regwrite_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2009' with positive edge clock.
Creating register for signal `\Decode.\id_ex_memtoreg_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2010' with positive edge clock.
Creating register for signal `\Decode.\id_ex_pcsel_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2011' with positive edge clock.
Creating register for signal `\Decode.\id_ex_rdsel_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2012' with positive edge clock.
Creating register for signal `\Decode.\id_ex_isjump_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2013' with positive edge clock.
Creating register for signal `\Decode.\id_ex_islui_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2014' with positive edge clock.
Creating register for signal `\Decode.\id_ex_rs1_data_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2015' with positive edge clock.
Creating register for signal `\Decode.\id_ex_rs2_data_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2016' with positive edge clock.
Creating register for signal `\Decode.\id_ex_imm_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2017' with positive edge clock.
Creating register for signal `\Decode.\id_ex_funct3_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2018' with positive edge clock.
Creating register for signal `\Decode.\id_ex_ex_rs1_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2019' with positive edge clock.
Creating register for signal `\Decode.\id_ex_ex_rs2_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2020' with positive edge clock.
Creating register for signal `\Decode.\id_ex_ex_rd_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2021' with positive edge clock.
Creating register for signal `\Decode.\id_ex_ex_use_rs1_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2022' with positive edge clock.
Creating register for signal `\Decode.\id_ex_ex_use_rs2_reg' using process `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
  created $dff cell `$procdff$2023' with positive edge clock.
Creating register for signal `\Execute.\csr_write_enable_out_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2024' with positive edge clock.
Creating register for signal `\Execute.\csr_write_address_out_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2025' with positive edge clock.
Creating register for signal `\Execute.\csr_write_data_out_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2026' with positive edge clock.
Creating register for signal `\Execute.\ecause_out_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2027' with positive edge clock.
Creating register for signal `\Execute.\csr_read_data_out_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2028' with positive edge clock.
Creating register for signal `\Execute.\mret_out_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2029' with positive edge clock.
Creating register for signal `\Execute.\wfi_out_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2030' with positive edge clock.
Creating register for signal `\Execute.\exception_out_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2031' with positive edge clock.
Creating register for signal `\Execute.\reg_pc_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2032' with positive edge clock.
Creating register for signal `\Execute.\target_pc_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2033' with positive edge clock.
Creating register for signal `\Execute.\mem_pc_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2034' with positive edge clock.
Creating register for signal `\Execute.\mem_isbranch_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2035' with positive edge clock.
Creating register for signal `\Execute.\mem_isjump_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2036' with positive edge clock.
Creating register for signal `\Execute.\mem_memread_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2037' with positive edge clock.
Creating register for signal `\Execute.\mem_memwrite_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2038' with positive edge clock.
Creating register for signal `\Execute.\mem_regwrite_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2039' with positive edge clock.
Creating register for signal `\Execute.\mem_memtoreg_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2040' with positive edge clock.
Creating register for signal `\Execute.\mem_zero_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2041' with positive edge clock.
Creating register for signal `\Execute.\mem_aluresult_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2042' with positive edge clock.
Creating register for signal `\Execute.\mem_rs2_data_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2043' with positive edge clock.
Creating register for signal `\Execute.\mem_funct3_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2044' with positive edge clock.
Creating register for signal `\Execute.\mem_rd_reg' using process `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
  created $dff cell `$procdff$2045' with positive edge clock.
Creating register for signal `\Memory.\csr_write_enable_out_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2046' with positive edge clock.
Creating register for signal `\Memory.\csr_write_address_out_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2047' with positive edge clock.
Creating register for signal `\Memory.\csr_write_data_out_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2048' with positive edge clock.
Creating register for signal `\Memory.\ecause_out_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2049' with positive edge clock.
Creating register for signal `\Memory.\trapped_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2050' with positive edge clock.
Creating register for signal `\Memory.\interrupt_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2051' with positive edge clock.
Creating register for signal `\Memory.\inst_retired_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2052' with positive edge clock.
Creating register for signal `\Memory.\csr_read_data_out_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2053' with positive edge clock.
Creating register for signal `\Memory.\mret_out_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2054' with positive edge clock.
Creating register for signal `\Memory.\wb_reg_pc_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2055' with positive edge clock.
Creating register for signal `\Memory.\wb_readdata_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2056' with positive edge clock.
Creating register for signal `\Memory.\wb_aluresult_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2057' with positive edge clock.
Creating register for signal `\Memory.\wb_memtoreg_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2058' with positive edge clock.
Creating register for signal `\Memory.\wb_regwrite_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2059' with positive edge clock.
Creating register for signal `\Memory.\wb_rd_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2060' with positive edge clock.
Creating register for signal `\Memory.\pcsrc_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2061' with positive edge clock.
Creating register for signal `\Memory.\branch_reg' using process `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
  created $dff cell `$procdff$2062' with positive edge clock.
Creating register for signal `\CSR.\mcycle' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2063' with positive edge clock.
Creating register for signal `\CSR.\minstret' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2064' with positive edge clock.
Creating register for signal `\CSR.\mepc' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2065' with positive edge clock.
Creating register for signal `\CSR.\mscratch' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2066' with positive edge clock.
Creating register for signal `\CSR.\mtvec' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2067' with positive edge clock.
Creating register for signal `\CSR.\mcause' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2068' with positive edge clock.
Creating register for signal `\CSR.\minterrupt' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2069' with positive edge clock.
Creating register for signal `\CSR.\pie' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2070' with positive edge clock.
Creating register for signal `\CSR.\ie' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2071' with positive edge clock.
Creating register for signal `\CSR.\meie' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2072' with positive edge clock.
Creating register for signal `\CSR.\msie' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2073' with positive edge clock.
Creating register for signal `\CSR.\msip' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2074' with positive edge clock.
Creating register for signal `\CSR.\mtie' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2075' with positive edge clock.
Creating register for signal `\CSR.\mtip' using process `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
  created $dff cell `$procdff$2076' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 96 empty switches in `\Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
Removing empty process `Regfile.$proc$/openlane/designs/core/src/core.v:629$764'.
Found and cleaned up 3 empty switches in `\BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
Removing empty process `BHT.$proc$/openlane/designs/core/src/core.v:64$577'.
Found and cleaned up 2 empty switches in `\BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
Removing empty process `BTB.$proc$/openlane/designs/core/src/core.v:192$555'.
Found and cleaned up 10 empty switches in `\Fetch.$proc$/openlane/designs/core/src/core.v:323$530'.
Removing empty process `Fetch.$proc$/openlane/designs/core/src/core.v:323$530'.
Found and cleaned up 58 empty switches in `\Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
Removing empty process `Decode.$proc$/openlane/designs/core/src/core.v:1281$516'.
Found and cleaned up 45 empty switches in `\Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
Removing empty process `Execute.$proc$/openlane/designs/core/src/core.v:1866$361'.
Found and cleaned up 28 empty switches in `\Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
Removing empty process `Memory.$proc$/openlane/designs/core/src/core.v:2287$338'.
Found and cleaned up 51 empty switches in `\CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
Removing empty process `CSR.$proc$/openlane/designs/core/src/core.v:2638$251'.
Cleaned up 293 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module core...
Checking module AluSelect...
Checking module ALU...
Checking module TargetGen...
Checking module Control...
Checking module Regfile...
Checking module ImmGen...
Checking module BHT...
Checking module BTB...
Checking module Fetch...
Checking module Decode...
Checking module Execute...
Checking module Memory...
Checking module Writeback...
Checking module CSR...
Checking module Hazard...
Checking module Branch...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
Optimizing module AluSelect.
<suppressed ~2 debug messages>
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module TargetGen.
Optimizing module Control.
<suppressed ~1 debug messages>
Optimizing module Regfile.
<suppressed ~35 debug messages>
Optimizing module ImmGen.
<suppressed ~1 debug messages>
Optimizing module BHT.
<suppressed ~3 debug messages>
Optimizing module BTB.
<suppressed ~2 debug messages>
Optimizing module Fetch.
<suppressed ~2 debug messages>
Optimizing module Decode.
<suppressed ~7 debug messages>
Optimizing module Execute.
<suppressed ~1 debug messages>
Optimizing module Memory.
<suppressed ~11 debug messages>
Optimizing module Writeback.
Optimizing module CSR.
<suppressed ~11 debug messages>
Optimizing module Hazard.
<suppressed ~4 debug messages>
Optimizing module Branch.
<suppressed ~1 debug messages>

21. Executing FLATTEN pass (flatten design).
Deleting now unused module AluSelect.
Deleting now unused module ALU.
Deleting now unused module TargetGen.
Deleting now unused module Control.
Deleting now unused module Regfile.
Deleting now unused module ImmGen.
Deleting now unused module BHT.
Deleting now unused module BTB.
Deleting now unused module Fetch.
Deleting now unused module Decode.
Deleting now unused module Execute.
Deleting now unused module Memory.
Deleting now unused module Writeback.
Deleting now unused module CSR.
Deleting now unused module Hazard.
Deleting now unused module Branch.
<suppressed ~16 debug messages>

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 36 unused cells and 930 unused wires.
<suppressed ~42 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~915 debug messages>
Removed a total of 305 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~158 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\fetch.\bht.$procmux$1346:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586
      New ports: A=1'0, B=1'1, Y=$flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0]
      New connections: $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [31:1] = { $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_target_pc$/openlane/designs/core/src/core.v:72$572_EN[31:0]$586 [0] }
    Consolidated identical input bits for $mux cell $flatten\fetch.\bht.$procmux$1364:
      Old ports: A=26'00000000000000000000000000, B=26'11111111111111111111111111, Y=$flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580
      New ports: A=1'0, B=1'1, Y=$flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0]
      New connections: $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [25:1] = { $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] $flatten\fetch.\bht.$0$memwr$\bhtTable_tag$/openlane/designs/core/src/core.v:66$570_EN[25:0]$580 [0] }
    Consolidated identical input bits for $mux cell $flatten\fetch.\btb.$procmux$1373:
      Old ports: A=2'00, B=2'11, Y=$flatten\fetch.\btb.$0$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_EN[1:0]$561
      New ports: A=1'0, B=1'1, Y=$flatten\fetch.\btb.$0$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_EN[1:0]$561 [0]
      New connections: $flatten\fetch.\btb.$0$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_EN[1:0]$561 [1] = $flatten\fetch.\btb.$0$memwr$\btbTable$/openlane/designs/core/src/core.v:197$536_EN[1:0]$561 [0]
    Consolidated identical input bits for $mux cell $flatten\fetch.\btb.$procmux$1382:
      Old ports: A=2'00, B=2'11, Y=$flatten\fetch.\btb.$0$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_EN[1:0]$558
      New ports: A=1'0, B=1'1, Y=$flatten\fetch.\btb.$0$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_EN[1:0]$558 [0]
      New connections: $flatten\fetch.\btb.$0$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_EN[1:0]$558 [1] = $flatten\fetch.\btb.$0$memwr$\btbTable$/openlane/designs/core/src/core.v:194$535_EN[1:0]$558 [0]
  Optimizing cells in module \core.
Performed a total of 4 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 303 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~154 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking core.decode.ecause_out_reg as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking core.decode.id_ex_memtoreg_reg as FSM state register:
    Users of register don't seem to benefit from recoding.

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~154 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\memory.$procdff$2062 ($dff) from module core (D = \memory._GEN_32, Q = \memory.branch_reg, rval = 1'0).
Adding SRST signal on $flatten\memory.$procdff$2061 ($dff) from module core (D = \memory._GEN_31, Q = \memory.pcsrc_reg, rval = 1'0).
Adding SRST signal on $flatten\memory.$procdff$2060 ($dff) from module core (D = \execute.mem_rd_reg, Q = \memory.wb_rd_reg, rval = 5'00000).
Adding SRST signal on $flatten\memory.$procdff$2059 ($dff) from module core (D = \memory._GEN_29, Q = \memory.wb_regwrite_reg, rval = 1'0).
Adding SRST signal on $flatten\memory.$procdff$2058 ($dff) from module core (D = \execute.mem_memtoreg_reg, Q = \memory.wb_memtoreg_reg, rval = 2'00).
Adding SRST signal on $flatten\memory.$procdff$2057 ($dff) from module core (D = \execute.mem_aluresult_reg, Q = \memory.wb_aluresult_reg, rval = 0).
Adding SRST signal on $flatten\memory.$procdff$2056 ($dff) from module core (D = \io_memory_read_data, Q = \memory.wb_readdata_reg, rval = 0).
Adding SRST signal on $flatten\memory.$procdff$2055 ($dff) from module core (D = \execute.reg_pc_reg, Q = \memory.wb_reg_pc_reg, rval = 0).
Adding SRST signal on $flatten\memory.$procdff$2054 ($dff) from module core (D = \memory._GEN_22, Q = \memory.mret_out_reg, rval = 1'0).
Adding SRST signal on $flatten\memory.$procdff$2053 ($dff) from module core (D = \execute.csr_read_data_out_reg, Q = \memory.csr_read_data_out_reg, rval = 0).
Adding SRST signal on $flatten\memory.$procdff$2052 ($dff) from module core (D = \memory._GEN_21, Q = \memory.inst_retired_reg, rval = 1'0).
Adding SRST signal on $flatten\memory.$procdff$2051 ($dff) from module core (D = \memory._GEN_20, Q = \memory.interrupt_reg, rval = 1'0).
Adding SRST signal on $flatten\memory.$procdff$2050 ($dff) from module core (D = \memory._GEN_19, Q = \memory.trapped_reg, rval = 1'0).
Adding SRST signal on $flatten\memory.$procdff$2049 ($dff) from module core (D = { $flatten\memory.$procmux$1789_Y [3] $flatten\memory.$procmux$1789_Y [1:0] }, Q = { \memory.ecause_out_reg [3] \memory.ecause_out_reg [1:0] }, rval = 3'000).
Adding SRST signal on $flatten\memory.$procdff$2049 ($dff) from module core (D = $flatten\memory.$procmux$1786_Y [2], Q = \memory.ecause_out_reg [2], rval = 1'0).
Adding SRST signal on $flatten\memory.$procdff$2048 ($dff) from module core (D = \execute.csr_write_data_out_reg, Q = \memory.csr_write_data_out_reg, rval = 0).
Adding SRST signal on $flatten\memory.$procdff$2047 ($dff) from module core (D = \execute.csr_write_address_out_reg, Q = \memory.csr_write_address_out_reg, rval = 12'000000000000).
Adding SRST signal on $flatten\memory.$procdff$2046 ($dff) from module core (D = \memory._GEN_15, Q = \memory.csr_write_enable_out_reg, rval = 1'0).
Adding SRST signal on $flatten\fetch.$procdff$1995 ($dff) from module core (D = { $flatten\fetch.$procmux$1405_Y [4] $flatten\fetch.$procmux$1405_Y [1:0] }, Q = { \fetch.instReg [4] \fetch.instReg [1:0] }, rval = 3'000).
Adding SRST signal on $flatten\fetch.$procdff$1995 ($dff) from module core (D = { $flatten\fetch.$procmux$1402_Y [31:5] $flatten\fetch.$procmux$1402_Y [3:2] }, Q = { \fetch.instReg [31:5] \fetch.instReg [3:2] }, rval = 29'00000000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$2121 ($sdff) from module core (D = { \io_fetch_data [31:5] \io_fetch_data [3:2] }, Q = { \fetch.instReg [31:5] \fetch.instReg [3:2] }).
Adding EN signal on $auto$ff.cc:266:slice$2120 ($sdff) from module core (D = { $flatten\fetch.$procmux$1405_Y [4] $flatten\fetch.$procmux$1405_Y [1:0] }, Q = { \fetch.instReg [4] \fetch.instReg [1:0] }).
Adding SRST signal on $flatten\fetch.$procdff$1994 ($dff) from module core (D = $flatten\fetch.$procmux$1410_Y, Q = \fetch.idPcReg, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2128 ($sdff) from module core (D = \fetch.pcReg, Q = \fetch.idPcReg).
Adding SRST signal on $flatten\fetch.$procdff$1993 ($dff) from module core (D = $flatten\fetch.$procmux$1397_Y, Q = \fetch.pcReg, rval = 8).
Adding EN signal on $auto$ff.cc:266:slice$2132 ($sdff) from module core (D = $flatten\fetch.$procmux$1397_Y, Q = \fetch.pcReg).
Adding SRST signal on $flatten\execute.$procdff$2045 ($dff) from module core (D = \decode.id_ex_ex_rd_reg, Q = \execute.mem_rd_reg, rval = 5'00000).
Adding SRST signal on $flatten\execute.$procdff$2044 ($dff) from module core (D = \decode.id_ex_funct3_reg, Q = \execute.mem_funct3_reg, rval = 3'000).
Adding SRST signal on $flatten\execute.$procdff$2043 ($dff) from module core (D = \decode.id_ex_rs2_data_reg, Q = \execute.mem_rs2_data_reg, rval = 0).
Adding SRST signal on $flatten\execute.$procdff$2042 ($dff) from module core (D = \execute.alu._io_alu_result_T_19 [31:0], Q = \execute.mem_aluresult_reg, rval = 0).
Adding SRST signal on $flatten\execute.$procdff$2041 ($dff) from module core (D = \execute.alu_io_zero, Q = \execute.mem_zero_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2040 ($dff) from module core (D = \decode.id_ex_memtoreg_reg, Q = \execute.mem_memtoreg_reg, rval = 2'00).
Adding SRST signal on $flatten\execute.$procdff$2039 ($dff) from module core (D = \decode.id_ex_regwrite_reg, Q = \execute.mem_regwrite_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2038 ($dff) from module core (D = \decode.id_ex_memwrite_reg, Q = \execute.mem_memwrite_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2037 ($dff) from module core (D = \decode.id_ex_memread_reg, Q = \execute.mem_memread_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2036 ($dff) from module core (D = \decode.id_ex_isjump_reg, Q = \execute.mem_isjump_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2035 ($dff) from module core (D = \decode.id_ex_isbranch_reg, Q = \execute.mem_isbranch_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2034 ($dff) from module core (D = \decode.id_ex_pc_reg, Q = \execute.mem_pc_reg, rval = 0).
Adding SRST signal on $flatten\execute.$procdff$2033 ($dff) from module core (D = \execute.targetGen_io_target_pc, Q = \execute.target_pc_reg, rval = 0).
Adding SRST signal on $flatten\execute.$procdff$2032 ($dff) from module core (D = \execute.targetGen_io_reg_pc, Q = \execute.reg_pc_reg, rval = 0).
Adding SRST signal on $flatten\execute.$procdff$2031 ($dff) from module core (D = $flatten\execute.$or$/openlane/designs/core/src/core.v:1895$364_Y, Q = \execute.exception_out_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2030 ($dff) from module core (D = \decode.wfi_out_reg, Q = \execute.wfi_out_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2029 ($dff) from module core (D = \decode.mret_out_reg, Q = \execute.mret_out_reg, rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2028 ($dff) from module core (D = \execute.io_csr_read_data, Q = \execute.csr_read_data_out_reg, rval = 0).
Adding SRST signal on $flatten\execute.$procdff$2027 ($dff) from module core (D = { \decode.ecause_out_reg [3:2] \decode.ecause_out_reg [0] }, Q = { \execute.ecause_out_reg [3:2] \execute.ecause_out_reg [0] }, rval = 3'000).
Adding SRST signal on $flatten\execute.$procdff$2027 ($dff) from module core (D = $flatten\execute.$procmux$1707_Y [1], Q = \execute.ecause_out_reg [1], rval = 1'0).
Adding SRST signal on $flatten\execute.$procdff$2026 ($dff) from module core (D = $flatten\execute.$procmux$1674_Y, Q = \execute.csr_write_data_out_reg, rval = 0).
Adding SRST signal on $flatten\execute.$procdff$2025 ($dff) from module core (D = \decode.csr_address_reg, Q = \execute.csr_write_address_out_reg, rval = 12'000000000000).
Adding SRST signal on $flatten\execute.$procdff$2024 ($dff) from module core (D = \decode.csr_write_reg, Q = \execute.csr_write_enable_out_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1977 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1123_Y, Q = \decode.regfile.registers_31, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2205 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_31).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1976 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1130_Y, Q = \decode.regfile.registers_30, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2209 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_30).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1975 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1137_Y, Q = \decode.regfile.registers_29, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2213 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_29).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1974 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1144_Y, Q = \decode.regfile.registers_28, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2217 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_28).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1973 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1151_Y, Q = \decode.regfile.registers_27, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2221 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_27).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1972 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1158_Y, Q = \decode.regfile.registers_26, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2225 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_26).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1971 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1165_Y, Q = \decode.regfile.registers_25, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2229 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_25).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1970 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1172_Y, Q = \decode.regfile.registers_24, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2233 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_24).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1969 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1179_Y, Q = \decode.regfile.registers_23, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2237 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_23).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1968 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1186_Y, Q = \decode.regfile.registers_22, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2241 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_22).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1967 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1193_Y, Q = \decode.regfile.registers_21, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2245 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_21).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1966 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1200_Y, Q = \decode.regfile.registers_20, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2249 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_20).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1965 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1207_Y, Q = \decode.regfile.registers_19, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2253 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_19).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1964 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1214_Y, Q = \decode.regfile.registers_18, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2257 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_18).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1963 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1221_Y, Q = \decode.regfile.registers_17, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2261 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_17).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1962 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1228_Y, Q = \decode.regfile.registers_16, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2265 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_16).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1961 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1235_Y, Q = \decode.regfile.registers_15, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2269 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_15).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1960 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1242_Y, Q = \decode.regfile.registers_14, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2273 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_14).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1959 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1249_Y, Q = \decode.regfile.registers_13, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2277 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_13).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1958 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1256_Y, Q = \decode.regfile.registers_12, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2281 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_12).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1957 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1263_Y, Q = \decode.regfile.registers_11, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2285 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_11).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1956 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1270_Y, Q = \decode.regfile.registers_10, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2289 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_10).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1955 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1277_Y, Q = \decode.regfile.registers_9, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2293 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_9).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1954 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1284_Y, Q = \decode.regfile.registers_8, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2297 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_8).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1953 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1291_Y, Q = \decode.regfile.registers_7, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2301 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_7).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1952 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1298_Y, Q = \decode.regfile.registers_6, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2305 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_6).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1951 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1305_Y, Q = \decode.regfile.registers_5, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2309 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_5).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1950 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1312_Y, Q = \decode.regfile.registers_4, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2313 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_4).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1949 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1319_Y, Q = \decode.regfile.registers_3, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2317 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_3).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1948 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1326_Y, Q = \decode.regfile.registers_2, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2321 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_2).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1947 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1333_Y, Q = \decode.regfile.registers_1, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2325 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_1).
Adding SRST signal on $flatten\decode.\regfile.$procdff$1946 ($dff) from module core (D = $flatten\decode.\regfile.$procmux$1340_Y, Q = \decode.regfile.registers_0, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2329 ($sdff) from module core (D = \decode.regfile.io_writedata, Q = \decode.regfile.registers_0).
Adding SRST signal on $flatten\decode.$procdff$2023 ($dff) from module core (D = \decode.control_io_use_rs2, Q = \decode.id_ex_ex_use_rs2_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2022 ($dff) from module core (D = \decode.control_io_use_rs1, Q = \decode.id_ex_ex_use_rs1_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2021 ($dff) from module core (D = \fetch.instReg [11:7], Q = \decode.id_ex_ex_rd_reg, rval = 5'00000).
Adding SRST signal on $flatten\decode.$procdff$2020 ($dff) from module core (D = \fetch.instReg [24:20], Q = \decode.id_ex_ex_rs2_reg, rval = 5'00000).
Adding SRST signal on $flatten\decode.$procdff$2019 ($dff) from module core (D = \fetch.instReg [19:15], Q = \decode.id_ex_ex_rs1_reg, rval = 5'00000).
Adding SRST signal on $flatten\decode.$procdff$2018 ($dff) from module core (D = \fetch.instReg [14:12], Q = \decode.id_ex_funct3_reg, rval = 3'000).
Adding SRST signal on $flatten\decode.$procdff$2017 ($dff) from module core (D = \decode.immGen._GEN_15, Q = \decode.id_ex_imm_reg, rval = 0).
Adding SRST signal on $flatten\decode.$procdff$2016 ($dff) from module core (D = \decode.regfile._GEN_63, Q = \decode.id_ex_rs2_data_reg, rval = 0).
Adding SRST signal on $flatten\decode.$procdff$2015 ($dff) from module core (D = \decode.regfile._GEN_31, Q = \decode.id_ex_rs1_data_reg, rval = 0).
Adding SRST signal on $flatten\decode.$procdff$2014 ($dff) from module core (D = \decode.control_io_islui, Q = \decode.id_ex_islui_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2013 ($dff) from module core (D = \decode.control_io_isjump, Q = \decode.id_ex_isjump_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2012 ($dff) from module core (D = \decode.control_io_rdsel, Q = \decode.id_ex_rdsel_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2011 ($dff) from module core (D = \decode.control_io_pcsel, Q = \decode.id_ex_pcsel_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2010 ($dff) from module core (D = \decode.control_io_memtoreg, Q = \decode.id_ex_memtoreg_reg, rval = 2'00).
Adding SRST signal on $flatten\decode.$procdff$2009 ($dff) from module core (D = \decode.control_io_regwrite, Q = \decode.id_ex_regwrite_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2008 ($dff) from module core (D = \decode.control_io_memwrite, Q = \decode.id_ex_memwrite_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2007 ($dff) from module core (D = \decode.control_io_memread, Q = \decode.id_ex_memread_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2006 ($dff) from module core (D = \decode.control_io_isbranch, Q = \decode.id_ex_isbranch_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2005 ($dff) from module core (D = \decode.control_io_immsrc, Q = \decode.id_ex_immsrc_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2004 ($dff) from module core (D = \decode.control._io_aluop_T_63, Q = \decode.id_ex_aluop_reg, rval = 4'0000).
Adding SRST signal on $flatten\decode.$procdff$2003 ($dff) from module core (D = \fetch.idPcReg, Q = \decode.id_ex_pc_reg, rval = 0).
Adding SRST signal on $flatten\decode.$procdff$2002 ($dff) from module core (D = \fetch.instReg [31:20], Q = \decode.csr_address_reg, rval = 12'000000000000).
Adding SRST signal on $flatten\decode.$procdff$2001 ($dff) from module core (D = \decode.csrInst, Q = \decode.csr_write_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$2000 ($dff) from module core (D = \decode.csrInst, Q = \decode.csr_read_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$1999 ($dff) from module core (D = $flatten\decode.$procmux$1557_Y, Q = \decode.exception_out_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$1998 ($dff) from module core (D = \decode.wfi_out, Q = \decode.wfi_out_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$1997 ($dff) from module core (D = \decode.mret_out, Q = \decode.mret_out_reg, rval = 1'0).
Adding SRST signal on $flatten\decode.$procdff$1996 ($dff) from module core (D = \decode.ecause_out, Q = \decode.ecause_out_reg [1:0], rval = 2'00).
Adding SRST signal on $flatten\csr.$procdff$2076 ($dff) from module core (D = $flatten\csr.$ge$/openlane/designs/core/src/core.v:2783$287_Y, Q = \csr.mtip, rval = 1'0).
Adding SRST signal on $flatten\csr.$procdff$2075 ($dff) from module core (D = $flatten\csr.$procmux$1896_Y, Q = \csr.mtie, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$2419 ($sdff) from module core (D = \memory.csr_write_data_out_reg [7], Q = \csr.mtie).
Adding SRST signal on $flatten\csr.$procdff$2074 ($dff) from module core (D = $flatten\csr.$procmux$1905_Y, Q = \csr.msip, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$2427 ($sdff) from module core (D = \memory.csr_write_data_out_reg [3], Q = \csr.msip).
Adding SRST signal on $flatten\csr.$procdff$2073 ($dff) from module core (D = $flatten\csr.$procmux$1914_Y, Q = \csr.msie, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$2433 ($sdff) from module core (D = \memory.csr_write_data_out_reg [3], Q = \csr.msie).
Adding SRST signal on $flatten\csr.$procdff$2072 ($dff) from module core (D = $flatten\csr.$procmux$1923_Y, Q = \csr.meie, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$2441 ($sdff) from module core (D = \memory.csr_write_data_out_reg [11], Q = \csr.meie).
Adding SRST signal on $flatten\csr.$procdff$2071 ($dff) from module core (D = $flatten\csr.$procmux$1818_Y, Q = \csr.ie, rval = 1'0).
Adding SRST signal on $flatten\csr.$procdff$2070 ($dff) from module core (D = $flatten\csr.$procmux$1827_Y, Q = \csr.pie, rval = 1'0).
Adding SRST signal on $flatten\csr.$procdff$2069 ($dff) from module core (D = $flatten\csr.$procmux$1839_Y, Q = \csr.minterrupt, rval = 1'0).
Adding SRST signal on $flatten\csr.$procdff$2068 ($dff) from module core (D = $flatten\csr.$procmux$1851_Y, Q = \csr.mcause, rval = 4'0000).
Adding SRST signal on $flatten\csr.$procdff$2067 ($dff) from module core (D = $flatten\csr.$procmux$1932_Y, Q = \csr.mtvec, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2453 ($sdff) from module core (D = { \memory.csr_write_data_out_reg [31:2] 2'00 }, Q = \csr.mtvec).
Adding SRST signal on $flatten\csr.$procdff$2066 ($dff) from module core (D = $flatten\csr.$procmux$1941_Y, Q = \csr.mscratch, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$2463 ($sdff) from module core (D = \memory.csr_write_data_out_reg, Q = \csr.mscratch).
Adding SRST signal on $flatten\csr.$procdff$2065 ($dff) from module core (D = $flatten\csr.$procmux$1863_Y, Q = \csr.mepc, rval = 0).
Adding SRST signal on $flatten\csr.$procdff$2064 ($dff) from module core (D = $flatten\csr.$procmux$1875_Y, Q = \csr.minstret, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $flatten\csr.$procdff$2063 ($dff) from module core (D = $flatten\csr.$procmux$1887_Y, Q = \csr.mcycle, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2454 ($sdffe) from module core.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$2454 ($sdffe) from module core.

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 274 unused cells and 278 unused wires.
<suppressed ~296 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~192 debug messages>
Removed a total of 64 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 64 unused wires.
<suppressed ~1 debug messages>

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

26.16. Rerunning OPT passes. (Maybe there is more to do..)

26.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

26.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

26.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

26.20. Executing OPT_DFF pass (perform DFF optimizations).

26.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

26.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

26.23. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell core.$flatten\fetch.\btb.$gt$/openlane/designs/core/src/core.v:164$538 ($gt).
Removed top 1 bits (of 2) from port B of cell core.$flatten\fetch.\btb.$add$/openlane/designs/core/src/core.v:183$551 ($add).
Removed top 1 bits (of 2) from port B of cell core.$flatten\fetch.\btb.$sub$/openlane/designs/core/src/core.v:187$553 ($sub).
Removed top 27 bits (of 32) from mux cell core.$flatten\fetch.$procmux$1405 ($mux).
Removed top 27 bits (of 32) from mux cell core.$flatten\fetch.$procmux$1402 ($mux).
Removed top 29 bits (of 32) from port B of cell core.$flatten\fetch.$add$/openlane/designs/core/src/core.v:289$525 ($add).
Removed top 1 bits (of 3) from port A of cell core.$flatten\decode.\immGen.$eq$/openlane/designs/core/src/core.v:989$628 ($eq).
Removed top 1 bits (of 3) from port A of cell core.$flatten\decode.\immGen.$eq$/openlane/designs/core/src/core.v:990$630 ($eq).
Removed top 2 bits (of 3) from port A of cell core.$flatten\decode.\immGen.$eq$/openlane/designs/core/src/core.v:991$632 ($eq).
Removed top 3 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:566$638 ($eq).
Removed top 3 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:567$640 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:568$642 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:569$644 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:570$646 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:571$648 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:572$650 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:573$652 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:574$654 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:575$656 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:576$658 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:577$660 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:578$662 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:579$664 ($eq).
Removed top 4 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:596$698 ($eq).
Removed top 3 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:597$700 ($eq).
Removed top 3 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:598$702 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:599$704 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:600$706 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:601$708 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:602$710 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:603$712 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:604$714 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:605$716 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:606$718 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:607$720 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:608$722 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:609$724 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:610$726 ($eq).
Removed top 4 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:640$770 ($eq).
Removed top 3 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:647$773 ($eq).
Removed top 3 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:654$776 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:661$779 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:668$782 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:675$785 ($eq).
Removed top 2 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:682$788 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:689$791 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:696$794 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:703$797 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:710$800 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:717$803 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:724$806 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:731$809 ($eq).
Removed top 1 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:738$812 ($eq).
Removed top 1 bits (of 7) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:418$862 ($eq).
Removed top 2 bits (of 3) from mux cell core.$flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:419$865 ($mux).
Removed top 2 bits (of 3) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:423$872 ($eq).
Removed top 1 bits (of 3) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:425$876 ($eq).
Removed top 1 bits (of 3) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:426$878 ($eq).
Removed top 3 bits (of 4) from mux cell core.$flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:434$895 ($mux).
Removed top 3 bits (of 4) from mux cell core.$flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:435$897 ($mux).
Removed top 1 bits (of 7) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:436$898 ($eq).
Removed top 2 bits (of 7) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:437$900 ($eq).
Removed top 5 bits (of 7) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:438$902 ($eq).
Removed top 1 bits (of 7) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:439$904 ($eq).
Removed top 1 bits (of 7) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:443$912 ($eq).
Removed top 2 bits (of 7) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:464$978 ($eq).
Removed cell core.$flatten\decode.$procmux$1566 ($mux).
Removed top 4 bits (of 5) from port A of cell core.$flatten\decode.\regfile.$eq$/openlane/designs/core/src/core.v:565$636 ($eq).
Removed top 4 bits (of 7) from port A of cell core.$flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:418$861 ($eq).
Removed cell core.$flatten\decode.$ternary$/openlane/designs/core/src/core.v:1204$515 ($mux).
Removed top 3 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1189$466 ($eq).
Removed top 2 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1188$464 ($eq).
Removed top 6 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1187$462 ($eq).
Removed top 2 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1184$458 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1183$457 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1170$441 ($eq).
Removed top 5 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1164$434 ($eq).
Removed top 2 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1152$418 ($eq).
Removed top 4 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1143$402 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1141$399 ($eq).
Removed top 1 bits (of 7) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1136$388 ($eq).
Removed top 3 bits (of 32) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1135$387 ($eq).
Removed top 2 bits (of 32) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1134$386 ($eq).
Removed top 1 bits (of 3) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1126$374 ($eq).
Removed top 1 bits (of 3) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1124$371 ($eq).
Removed top 2 bits (of 3) from port B of cell core.$flatten\decode.$eq$/openlane/designs/core/src/core.v:1122$368 ($eq).
Removed top 29 bits (of 32) from port B of cell core.$flatten\execute.\targetGen.$add$/openlane/designs/core/src/core.v:1652$1051 ($add).
Removed top 31 bits (of 63) from port A of cell core.$flatten\execute.\alu.$shl$/openlane/designs/core/src/core.v:1624$1059 ($shl).
Removed top 3 bits (of 4) from port A of cell core.$flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1630$1066 ($eq).
Removed top 2 bits (of 4) from port A of cell core.$flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1631$1068 ($eq).
Removed top 2 bits (of 4) from port A of cell core.$flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1632$1070 ($eq).
Removed top 1 bits (of 4) from port A of cell core.$flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1633$1072 ($eq).
Removed top 1 bits (of 4) from port A of cell core.$flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1634$1074 ($eq).
Removed top 1 bits (of 4) from port A of cell core.$flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1635$1076 ($eq).
Removed top 1 bits (of 4) from port A of cell core.$flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1636$1078 ($eq).
Removed top 31 bits (of 63) from mux cell core.$flatten\execute.\alu.$ternary$/openlane/designs/core/src/core.v:1638$1083 ($mux).
Removed top 1 bits (of 2) from port B of cell core.$flatten\execute.\aluSelect.$eq$/openlane/designs/core/src/core.v:1597$1086 ($eq).
Removed top 1 bits (of 2) from port B of cell core.$flatten\execute.\aluSelect.$eq$/openlane/designs/core/src/core.v:1603$1092 ($eq).
Removed top 2 bits (of 4) from mux cell core.$flatten\execute.$procmux$1707 ($mux).
Removed top 1 bits (of 3) from port A of cell core.$flatten\execute.$eq$/openlane/designs/core/src/core.v:1924$366 ($eq).
Removed top 1 bits (of 3) from port A of cell core.$flatten\execute.$eq$/openlane/designs/core/src/core.v:1792$349 ($eq).
Removed top 1 bits (of 2) from port A of cell core.$flatten\writeback.$eq$/openlane/designs/core/src/core.v:2484$288 ($eq).
Removed top 2 bits (of 3) from port B of cell core.$flatten\memory.\branch.$eq$/openlane/designs/core/src/core.v:2120$1101 ($eq).
Removed top 1 bits (of 3) from FF cell core.$auto$ff.cc:266:slice$2107 ($sdff).
Removed top 2 bits (of 4) from mux cell core.$flatten\memory.$procmux$1789 ($mux).
Removed top 1 bits (of 4) from mux cell core.$flatten\memory.$procmux$1786 ($mux).
Removed top 1 bits (of 4) from mux cell core.$flatten\memory.$ternary$/openlane/designs/core/src/core.v:2216$311 ($mux).
Removed top 1 bits (of 4) from mux cell core.$flatten\memory.$ternary$/openlane/designs/core/src/core.v:2215$310 ($mux).
Removed top 1 bits (of 4) from mux cell core.$flatten\memory.$ternary$/openlane/designs/core/src/core.v:2213$304 ($mux).
Removed top 1 bits (of 3) from mux cell core.$flatten\memory.$ternary$/openlane/designs/core/src/core.v:2211$300 ($mux).
Removed top 2 bits (of 4) from port B of cell core.$auto$opt_dff.cc:195:make_patterns_logic$2135 ($ne).
Removed top 1 bits (of 2) from port B of cell core.$auto$opt_dff.cc:195:make_patterns_logic$2127 ($ne).
Removed top 33 bits (of 64) from port B of cell core.$flatten\csr.$ge$/openlane/designs/core/src/core.v:2783$287 ($ge).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2644$253 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2642$252 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2620$213 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2613$199 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2607$187 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2602$177 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2598$169 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2596$165 ($eq).
Removed top 32 bits (of 64) from port A of cell core.$flatten\csr.$or$/openlane/designs/core/src/core.v:2592$154 ($or).
Removed top 32 bits (of 64) from port A of cell core.$flatten\csr.$or$/openlane/designs/core/src/core.v:2591$153 ($or).
Removed top 63 bits (of 64) from port B of cell core.$flatten\csr.$add$/openlane/designs/core/src/core.v:2587$151 ($add).
Removed top 63 bits (of 64) from port B of cell core.$flatten\csr.$add$/openlane/designs/core/src/core.v:2586$150 ($add).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2565$103 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2563$99 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2561$95 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2559$91 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2557$87 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2555$83 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2553$79 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2551$75 ($eq).
Removed top 2 bits (of 12) from port A of cell core.$flatten\csr.$eq$/openlane/designs/core/src/core.v:2549$71 ($eq).
Removed top 29 bits (of 32) from port B of cell core.$flatten\hazard.$add$/openlane/designs/core/src/core.v:2895$22 ($add).
Removed cell core.$auto$ff.cc:266:slice$2417 ($dff).
Removed top 31 bits (of 63) from mux cell core.$flatten\execute.\alu.$ternary$/openlane/designs/core/src/core.v:1637$1081 ($mux).
Removed top 2 bits (of 3) from FF cell core.$auto$ff.cc:266:slice$2190 ($sdff).
Removed top 31 bits (of 63) from mux cell core.$flatten\execute.\alu.$ternary$/openlane/designs/core/src/core.v:1636$1079 ($mux).
Removed top 31 bits (of 63) from mux cell core.$flatten\execute.\alu.$ternary$/openlane/designs/core/src/core.v:1635$1077 ($mux).
Removed top 31 bits (of 63) from mux cell core.$flatten\execute.\alu.$ternary$/openlane/designs/core/src/core.v:1634$1075 ($mux).
Removed top 31 bits (of 63) from port Y of cell core.$flatten\execute.\alu.$shl$/openlane/designs/core/src/core.v:1624$1059 ($shl).
Removed top 2 bits (of 4) from wire core.$flatten\execute.$procmux$1707_Y.
Removed top 27 bits (of 32) from wire core.$flatten\fetch.$procmux$1402_Y.
Removed top 27 bits (of 32) from wire core.$flatten\fetch.$procmux$1405_Y.
Removed top 1 bits (of 4) from wire core.$flatten\memory.$procmux$1786_Y.
Removed top 2 bits (of 4) from wire core.$flatten\memory.$procmux$1789_Y.
Removed top 2 bits (of 4) from wire core.decode_io_ecause_out.
Removed top 2 bits (of 4) from wire core.execute_io_ecause_in.
Removed top 2 bits (of 4) from wire core.execute_io_ecause_out.
Removed top 2 bits (of 4) from wire core.memory_io_ecause_in.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module core:
  creating $macc model for $flatten\csr.$add$/openlane/designs/core/src/core.v:2586$150 ($add).
  creating $macc model for $flatten\csr.$add$/openlane/designs/core/src/core.v:2587$151 ($add).
  creating $macc model for $flatten\execute.\alu.$add$/openlane/designs/core/src/core.v:1618$1054 ($add).
  creating $macc model for $flatten\execute.\alu.$sub$/openlane/designs/core/src/core.v:1619$1055 ($sub).
  creating $macc model for $flatten\execute.\targetGen.$add$/openlane/designs/core/src/core.v:1651$1050 ($add).
  creating $macc model for $flatten\execute.\targetGen.$add$/openlane/designs/core/src/core.v:1652$1051 ($add).
  creating $macc model for $flatten\fetch.$add$/openlane/designs/core/src/core.v:289$525 ($add).
  creating $macc model for $flatten\fetch.\btb.$add$/openlane/designs/core/src/core.v:183$551 ($add).
  creating $macc model for $flatten\fetch.\btb.$sub$/openlane/designs/core/src/core.v:187$553 ($sub).
  creating $macc model for $flatten\hazard.$add$/openlane/designs/core/src/core.v:2895$22 ($add).
  creating $alu model for $macc $flatten\hazard.$add$/openlane/designs/core/src/core.v:2895$22.
  creating $alu model for $macc $flatten\fetch.\btb.$sub$/openlane/designs/core/src/core.v:187$553.
  creating $alu model for $macc $flatten\fetch.\btb.$add$/openlane/designs/core/src/core.v:183$551.
  creating $alu model for $macc $flatten\fetch.$add$/openlane/designs/core/src/core.v:289$525.
  creating $alu model for $macc $flatten\execute.\targetGen.$add$/openlane/designs/core/src/core.v:1652$1051.
  creating $alu model for $macc $flatten\execute.\targetGen.$add$/openlane/designs/core/src/core.v:1651$1050.
  creating $alu model for $macc $flatten\execute.\alu.$sub$/openlane/designs/core/src/core.v:1619$1055.
  creating $alu model for $macc $flatten\execute.\alu.$add$/openlane/designs/core/src/core.v:1618$1054.
  creating $alu model for $macc $flatten\csr.$add$/openlane/designs/core/src/core.v:2587$151.
  creating $alu model for $macc $flatten\csr.$add$/openlane/designs/core/src/core.v:2586$150.
  creating $alu model for $flatten\csr.$ge$/openlane/designs/core/src/core.v:2783$287 ($ge): new $alu
  creating $alu model for $flatten\execute.\alu.$lt$/openlane/designs/core/src/core.v:1627$1062 ($lt): new $alu
  creating $alu model for $flatten\execute.\alu.$lt$/openlane/designs/core/src/core.v:1628$1063 ($lt): new $alu
  creating $alu model for $flatten\fetch.\btb.$gt$/openlane/designs/core/src/core.v:164$538 ($gt): new $alu
  creating $alu model for $flatten\fetch.\btb.$lt$/openlane/designs/core/src/core.v:163$537 ($lt): new $alu
  creating $alu model for $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1639$1084 ($eq): merged with $flatten\execute.\alu.$lt$/openlane/designs/core/src/core.v:1628$1063.
  creating $alu cell for $flatten\fetch.\btb.$lt$/openlane/designs/core/src/core.v:163$537: $auto$alumacc.cc:485:replace_alu$2493
  creating $alu cell for $flatten\fetch.\btb.$gt$/openlane/designs/core/src/core.v:164$538: $auto$alumacc.cc:485:replace_alu$2504
  creating $alu cell for $flatten\csr.$ge$/openlane/designs/core/src/core.v:2783$287: $auto$alumacc.cc:485:replace_alu$2509
  creating $alu cell for $flatten\csr.$add$/openlane/designs/core/src/core.v:2586$150: $auto$alumacc.cc:485:replace_alu$2518
  creating $alu cell for $flatten\csr.$add$/openlane/designs/core/src/core.v:2587$151: $auto$alumacc.cc:485:replace_alu$2521
  creating $alu cell for $flatten\execute.\alu.$lt$/openlane/designs/core/src/core.v:1628$1063, $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1639$1084: $auto$alumacc.cc:485:replace_alu$2524
  creating $alu cell for $flatten\execute.\alu.$lt$/openlane/designs/core/src/core.v:1627$1062: $auto$alumacc.cc:485:replace_alu$2535
  creating $alu cell for $flatten\execute.\alu.$add$/openlane/designs/core/src/core.v:1618$1054: $auto$alumacc.cc:485:replace_alu$2548
  creating $alu cell for $flatten\execute.\alu.$sub$/openlane/designs/core/src/core.v:1619$1055: $auto$alumacc.cc:485:replace_alu$2551
  creating $alu cell for $flatten\execute.\targetGen.$add$/openlane/designs/core/src/core.v:1651$1050: $auto$alumacc.cc:485:replace_alu$2554
  creating $alu cell for $flatten\execute.\targetGen.$add$/openlane/designs/core/src/core.v:1652$1051: $auto$alumacc.cc:485:replace_alu$2557
  creating $alu cell for $flatten\fetch.$add$/openlane/designs/core/src/core.v:289$525: $auto$alumacc.cc:485:replace_alu$2560
  creating $alu cell for $flatten\fetch.\btb.$add$/openlane/designs/core/src/core.v:183$551: $auto$alumacc.cc:485:replace_alu$2563
  creating $alu cell for $flatten\fetch.\btb.$sub$/openlane/designs/core/src/core.v:187$553: $auto$alumacc.cc:485:replace_alu$2566
  creating $alu cell for $flatten\hazard.$add$/openlane/designs/core/src/core.v:2895$22: $auto$alumacc.cc:485:replace_alu$2569
  created 15 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).
Found 7 cells in module core that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\fetch.\btb.$memrd$\btbTable$/openlane/designs/core/src/core.v:170$542 ($memrd):
    Found 1 activation_patterns using ctrl signal { \memory.trapped_reg \memory.mret_out_reg \fetch.io_if_id_stall $flatten\fetch.$and$/openlane/designs/core/src/core.v:330$532_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\fetch.\bht.$memrd$\bhtTable_valid$/openlane/designs/core/src/core.v:49$574 ($memrd):
    Found 1 activation_patterns using ctrl signal { \memory.trapped_reg \memory.mret_out_reg \fetch.io_if_id_stall $flatten\fetch.$and$/openlane/designs/core/src/core.v:330$532_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\fetch.\bht.$memrd$\bhtTable_target_pc$/openlane/designs/core/src/core.v:56$575 ($memrd):
    Found 1 activation_patterns using ctrl signal { \memory.trapped_reg \memory.mret_out_reg \fetch.io_if_id_stall $flatten\fetch.$and$/openlane/designs/core/src/core.v:290$527_Y $flatten\fetch.$and$/openlane/designs/core/src/core.v:330$532_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\fetch.\bht.$memrd$\bhtTable_tag$/openlane/designs/core/src/core.v:42$573 ($memrd):
    Found 1 activation_patterns using ctrl signal { \memory.trapped_reg \memory.mret_out_reg \fetch.io_if_id_stall $flatten\fetch.$and$/openlane/designs/core/src/core.v:330$532_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\execute.\alu.$sshr$/openlane/designs/core/src/core.v:1626$1061 ($sshr):
    Found 1 activation_patterns using ctrl signal { $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1638$1082_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1637$1080_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1636$1078_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\execute.\alu.$shr$/openlane/designs/core/src/core.v:1625$1060 ($shr):
    Found 1 activation_patterns using ctrl signal { $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1638$1082_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1637$1080_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1636$1078_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1635$1076_Y }.
    No candidates found.
  Analyzing resource sharing options for $flatten\execute.\alu.$shl$/openlane/designs/core/src/core.v:1624$1059 ($shl):
    Found 1 activation_patterns using ctrl signal { $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1638$1082_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1637$1080_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1636$1078_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1635$1076_Y $flatten\execute.\alu.$eq$/openlane/designs/core/src/core.v:1634$1074_Y }.
    No candidates found.

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~62 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$2390 ($sdff) from module core (D = \decode.control._io_aluop_T_57 [2:1], Q = \decode.id_ex_aluop_reg [2:1], rval = 2'00).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    New input vector for $reduce_or cell $auto$opt_dff.cc:254:combine_resets$2574: { \decode.io_id_ex_flush \decode.control_io_isbranch \decode.control_io_memread \decode.control_io_memwrite \decode.control_io_pcsel \decode.control_io_rdsel \decode.control_io_islui $flatten\decode.\control.$eq$/openlane/designs/core/src/core.v:441$908_Y \reset }
  Optimizing cells in module \core.
Performed a total of 1 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

32.16. Rerunning OPT passes. (Maybe there is more to do..)

32.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

32.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

32.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

32.20. Executing OPT_DFF pass (perform DFF optimizations).

32.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

32.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

32.23. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 1 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing core.fetch.bht.bhtTable_tag write port 0.
  Analyzing core.fetch.bht.bhtTable_target_pc write port 0.
  Analyzing core.fetch.bht.bhtTable_valid write port 0.
  Analyzing core.fetch.btb.btbTable write port 0.
  Analyzing core.fetch.btb.btbTable write port 1.

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\fetch.bht.bhtTable_tag'[0] in module `\core': no output FF found.
Checking read port `\fetch.bht.bhtTable_target_pc'[0] in module `\core': FF found, but with a mux select that doesn't seem to correspond to transparency logic.
Checking read port `\fetch.bht.bhtTable_valid'[0] in module `\core': no output FF found.
Checking read port `\fetch.btb.btbTable'[0] in module `\core': no output FF found.
Checking read port `\fetch.btb.btbTable'[1] in module `\core': no output FF found.
Checking read port address `\fetch.bht.bhtTable_tag'[0] in module `\core': merged address FF to cell.
Checking read port address `\fetch.bht.bhtTable_target_pc'[0] in module `\core': merged address FF to cell.
Checking read port address `\fetch.bht.bhtTable_valid'[0] in module `\core': merged address FF to cell.
Checking read port address `\fetch.btb.btbTable'[0] in module `\core': merged address FF to cell.
Checking read port address `\fetch.btb.btbTable'[1] in module `\core': merged address FF to cell.

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory core.fetch.btb.btbTable by address:
Consolidating write ports of memory core.fetch.btb.btbTable by address:
  Merging ports 0, 1 (address \execute.mem_pc_reg [5:2]).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~66 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:266:slice$2477 ($sdff) from module core (D = $flatten\csr.$procmux$1887_Y [63:32], Q = \csr.mcycle [63:32]).
Adding EN signal on $auto$ff.cc:266:slice$2476 ($sdff) from module core (D = $flatten\csr.$procmux$1875_Y [63:32], Q = \csr.minstret [63:32]).
Adding EN signal on $auto$ff.cc:266:slice$2133 ($sdffe) from module core (D = $flatten\fetch.$procmux$1397_Y [1:0], Q = \fetch.pcReg [1:0]).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 33 unused cells and 60 unused wires.
<suppressed ~34 debug messages>

35.5. Rerunning OPT passes. (Removed registers in this run.)

35.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~1 debug messages>

35.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

35.8. Executing OPT_DFF pass (perform DFF optimizations).

35.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

35.10. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \fetch.bht.bhtTable_tag in module \core:
  created 16 $dff cells and 0 static cells of width 26.
Extracted addr FF from read port 0 of core.fetch.bht.bhtTable_tag: $\fetch.bht.bhtTable_tag$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 16 write mux blocks.
Mapping memory \fetch.bht.bhtTable_target_pc in module \core:
  created 16 $dff cells and 0 static cells of width 32.
Extracted addr FF from read port 0 of core.fetch.bht.bhtTable_target_pc: $\fetch.bht.bhtTable_target_pc$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 16 write mux blocks.
Mapping memory \fetch.bht.bhtTable_valid in module \core:
  created 16 $dff cells and 0 static cells of width 1.
Extracted addr FF from read port 0 of core.fetch.bht.bhtTable_valid: $\fetch.bht.bhtTable_valid$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 16 write mux blocks.
Mapping memory \fetch.btb.btbTable in module \core:
  created 16 $dff cells and 0 static cells of width 2.
Extracted addr FF from read port 0 of core.fetch.btb.btbTable: $\fetch.btb.btbTable$rdreg[0]
Extracted addr FF from read port 1 of core.fetch.btb.btbTable: $\fetch.btb.btbTable$rdreg[1]
  read interface: 2 $dff and 30 $mux cells.
  write interface: 16 write mux blocks.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~24 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~105 debug messages>
Removed a total of 35 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~105 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\decode.$ternary$/openlane/designs/core/src/core.v:1203$514:
      Old ports: A=2'10, B=2'00, Y=\decode.ecause_out
      New ports: A=1'1, B=1'0, Y=\decode.ecause_out [1]
      New connections: \decode.ecause_out [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:427$881:
      Old ports: A=2'00, B=2'10, Y=\decode.control._io_aluop_T_29
      New ports: A=1'0, B=1'1, Y=\decode.control._io_aluop_T_29 [1]
      New connections: \decode.control._io_aluop_T_29 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:447$931:
      Old ports: A=2'00, B=2'11, Y=\decode.control._io_memtoreg_T_3
      New ports: A=1'0, B=1'1, Y=\decode.control._io_memtoreg_T_3 [0]
      New connections: \decode.control._io_memtoreg_T_3 [1] = \decode.control._io_memtoreg_T_3 [0]
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:453$943:
      Old ports: A=2'00, B=2'10, Y=\decode.control._io_memtoreg_T_15
      New ports: A=1'0, B=1'1, Y=\decode.control._io_memtoreg_T_15 [1]
      New connections: \decode.control._io_memtoreg_T_15 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\decode.\immGen.$ternary$/openlane/designs/core/src/core.v:968$600:
      Old ports: A=3'000, B=3'111, Y=\decode.immGen._GEN_0
      New ports: A=1'0, B=1'1, Y=\decode.immGen._GEN_0 [0]
      New connections: \decode.immGen._GEN_0 [2:1] = { \decode.immGen._GEN_0 [0] \decode.immGen._GEN_0 [0] }
    Consolidated identical input bits for $mux cell $flatten\decode.\immGen.$ternary$/openlane/designs/core/src/core.v:977$617:
      Old ports: A=20'00000000000000000000, B=20'11111111111111111111, Y=\decode.immGen._imm_T_2
      New ports: A=1'0, B=1'1, Y=\decode.immGen._imm_T_2 [0]
      New connections: \decode.immGen._imm_T_2 [19:1] = { \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] \decode.immGen._imm_T_2 [0] }
    Consolidated identical input bits for $mux cell $flatten\decode.\immGen.$ternary$/openlane/designs/core/src/core.v:980$618:
      Old ports: A=19'0000000000000000000, B=19'1111111111111111111, Y=\decode.immGen._imm_T_13
      New ports: A=1'0, B=1'1, Y=\decode.immGen._imm_T_13 [0]
      New connections: \decode.immGen._imm_T_13 [18:1] = { \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] \decode.immGen._imm_T_13 [0] }
    Consolidated identical input bits for $mux cell $flatten\decode.\immGen.$ternary$/openlane/designs/core/src/core.v:982$619:
      Old ports: A=11'00000000000, B=11'11111111111, Y=\decode.immGen._imm_T_20
      New ports: A=1'0, B=1'1, Y=\decode.immGen._imm_T_20 [0]
      New connections: \decode.immGen._imm_T_20 [10:1] = { \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] \decode.immGen._imm_T_20 [0] }
    Consolidated identical input bits for $mux cell $flatten\decode.\immGen.$ternary$/openlane/designs/core/src/core.v:985$621:
      Old ports: A=0, B={ \fetch.instReg [31:12] 12'000000000000 }, Y=\decode.immGen._GEN_9
      New ports: A=20'00000000000000000000, B=\fetch.instReg [31:12], Y=\decode.immGen._GEN_9 [31:12]
      New connections: \decode.immGen._GEN_9 [11:0] = 12'000000000000
    Consolidated identical input bits for $mux cell $flatten\hazard.$ternary$/openlane/designs/core/src/core.v:2891$8:
      Old ports: A=2'00, B=2'10, Y=\hazard._GEN_0
      New ports: A=1'0, B=1'1, Y=\hazard._GEN_0 [1]
      New connections: \hazard._GEN_0 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\hazard.$ternary$/openlane/designs/core/src/core.v:2892$13:
      Old ports: A=2'00, B=2'10, Y=\hazard._GEN_2
      New ports: A=1'0, B=1'1, Y=\hazard._GEN_2 [1]
      New connections: \hazard._GEN_2 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\memory.$ternary$/openlane/designs/core/src/core.v:2211$300:
      Old ports: A=2'10, B=2'00, Y=\memory._ecause_out_T [1:0]
      New ports: A=1'1, B=1'0, Y=\memory._ecause_out_T [1]
      New connections: \memory._ecause_out_T [0] = 1'0
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:448$933:
      Old ports: A=\decode.control._io_memtoreg_T_3, B=2'11, Y=\decode.control._io_memtoreg_T_5
      New ports: A=\decode.control._io_memtoreg_T_3 [0], B=1'1, Y=\decode.control._io_memtoreg_T_5 [0]
      New connections: \decode.control._io_memtoreg_T_5 [1] = \decode.control._io_memtoreg_T_5 [0]
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:454$945:
      Old ports: A=\decode.control._io_memtoreg_T_15, B=2'10, Y=\decode.control._io_memtoreg_T_17
      New ports: A=\decode.control._io_memtoreg_T_15 [1], B=1'1, Y=\decode.control._io_memtoreg_T_17 [1]
      New connections: \decode.control._io_memtoreg_T_17 [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\decode.\immGen.$ternary$/openlane/designs/core/src/core.v:969$602:
      Old ports: A=\decode.immGen._GEN_0, B=3'110, Y=\decode.immGen._GEN_1
      New ports: A={ \decode.immGen._GEN_0 [0] \decode.immGen._GEN_0 [0] }, B=2'10, Y=\decode.immGen._GEN_1 [1:0]
      New connections: \decode.immGen._GEN_1 [2] = \decode.immGen._GEN_1 [1]
    Consolidated identical input bits for $mux cell $flatten\decode.\immGen.$ternary$/openlane/designs/core/src/core.v:986$623:
      Old ports: A=\decode.immGen._GEN_9, B={ \fetch.instReg [31:12] 12'000000000000 }, Y=\decode.immGen._GEN_10
      New ports: A=\decode.immGen._GEN_9 [31:12], B=\fetch.instReg [31:12], Y=\decode.immGen._GEN_10 [31:12]
      New connections: \decode.immGen._GEN_10 [11:0] = 12'000000000000
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:449$935:
      Old ports: A=\decode.control._io_memtoreg_T_5, B=2'11, Y=\decode.control._io_memtoreg_T_7
      New ports: A=\decode.control._io_memtoreg_T_5 [0], B=1'1, Y=\decode.control._io_memtoreg_T_7 [0]
      New connections: \decode.control._io_memtoreg_T_7 [1] = \decode.control._io_memtoreg_T_7 [0]
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:450$937:
      Old ports: A=\decode.control._io_memtoreg_T_7, B=2'11, Y=\decode.control._io_memtoreg_T_9
      New ports: A=\decode.control._io_memtoreg_T_7 [0], B=1'1, Y=\decode.control._io_memtoreg_T_9 [0]
      New connections: \decode.control._io_memtoreg_T_9 [1] = \decode.control._io_memtoreg_T_9 [0]
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:451$939:
      Old ports: A=\decode.control._io_memtoreg_T_9, B=2'11, Y=\decode.control._io_memtoreg_T_11
      New ports: A=\decode.control._io_memtoreg_T_9 [0], B=1'1, Y=\decode.control._io_memtoreg_T_11 [0]
      New connections: \decode.control._io_memtoreg_T_11 [1] = \decode.control._io_memtoreg_T_11 [0]
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\decode.\control.$ternary$/openlane/designs/core/src/core.v:452$941:
      Old ports: A=\decode.control._io_memtoreg_T_11, B=2'11, Y=\decode.control._io_memtoreg_T_13
      New ports: A=\decode.control._io_memtoreg_T_11 [0], B=1'1, Y=\decode.control._io_memtoreg_T_13 [0]
      New connections: \decode.control._io_memtoreg_T_13 [1] = \decode.control._io_memtoreg_T_13 [0]
  Optimizing cells in module \core.
Performed a total of 20 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

37.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $auto$memory_share.cc:273:consolidate_wr_by_addr$2604 in front of them:
        $auto$alumacc.cc:485:replace_alu$2566
        $auto$alumacc.cc:485:replace_alu$2563

37.7. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $\fetch.btb.btbTable$rdreg[0] ($dff) from module core (D = \decode.id_ex_pc_reg [5:2], Q = $\fetch.btb.btbTable$rdreg[0]$q, rval = 4'0000).
Adding SRST signal on $\fetch.btb.btbTable$rdreg[1] ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2583, Q = $\fetch.btb.btbTable$rdreg[1]$q, rval = 4'0010).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 2 unused cells and 191 unused wires.
<suppressed ~5 debug messages>

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~17 debug messages>

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~102 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $auto$opt_share.cc:244:merge_operators$3372:
      Old ports: A=2'11, B=2'01, Y=$auto$rtlil.cc:2558:Mux$3373
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2558:Mux$3373 [1]
      New connections: $auto$rtlil.cc:2558:Mux$3373 [0] = 1'1
  Optimizing cells in module \core.
Performed a total of 1 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\fetch.btb.btbTable[9]$3201 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[9]).
Adding EN signal on $memory\fetch.btb.btbTable[8]$3199 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[8]).
Adding EN signal on $memory\fetch.btb.btbTable[7]$3197 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[7]).
Adding EN signal on $memory\fetch.btb.btbTable[6]$3195 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[6]).
Adding EN signal on $memory\fetch.btb.btbTable[5]$3193 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[5]).
Adding EN signal on $memory\fetch.btb.btbTable[4]$3191 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[4]).
Adding EN signal on $memory\fetch.btb.btbTable[3]$3189 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[3]).
Adding EN signal on $memory\fetch.btb.btbTable[2]$3187 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[2]).
Adding EN signal on $memory\fetch.btb.btbTable[1]$3185 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[1]).
Adding EN signal on $memory\fetch.btb.btbTable[15]$3213 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[15]).
Adding EN signal on $memory\fetch.btb.btbTable[14]$3211 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[14]).
Adding EN signal on $memory\fetch.btb.btbTable[13]$3209 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[13]).
Adding EN signal on $memory\fetch.btb.btbTable[12]$3207 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[12]).
Adding EN signal on $memory\fetch.btb.btbTable[11]$3205 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[11]).
Adding EN signal on $memory\fetch.btb.btbTable[10]$3203 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[10]).
Adding EN signal on $memory\fetch.btb.btbTable[0]$3183 ($dff) from module core (D = $auto$rtlil.cc:2558:Mux$2605, Q = \fetch.btb.btbTable[0]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[9]$2919 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[9]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[8]$2917 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[8]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[7]$2915 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[7]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[6]$2913 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[6]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[5]$2911 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[5]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[4]$2909 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[4]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[3]$2907 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[3]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[2]$2905 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[2]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[1]$2903 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[1]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[15]$2931 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[15]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[14]$2929 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[14]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[13]$2927 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[13]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[12]$2925 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[12]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[11]$2923 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[11]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[10]$2921 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[10]).
Adding EN signal on $memory\fetch.bht.bhtTable_target_pc[0]$2901 ($dff) from module core (D = \execute.target_pc_reg, Q = \fetch.bht.bhtTable_target_pc[0]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[9]$2714 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[9]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[8]$2712 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[8]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[7]$2710 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[7]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[6]$2708 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[6]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[5]$2706 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[5]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[4]$2704 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[4]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[3]$2702 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[3]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[2]$2700 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[2]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[1]$2698 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[1]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[15]$2726 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[15]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[14]$2724 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[14]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[13]$2722 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[13]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[12]$2720 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[12]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[11]$2718 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[11]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[10]$2716 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[10]).
Adding EN signal on $memory\fetch.bht.bhtTable_tag[0]$2696 ($dff) from module core (D = \execute.mem_pc_reg [31:6], Q = \fetch.bht.bhtTable_tag[0]).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2414 ($sdff) from module core.

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 48 unused cells and 62 unused wires.
<suppressed ~49 debug messages>

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~1 debug messages>

37.18. Rerunning OPT passes. (Maybe there is more to do..)

37.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

37.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\execute.$procmux$1707:
      Old ports: A={ \decode.ecause_out_reg [1] 1'0 }, B=2'10, Y=$auto$wreduce.cc:461:run$2479 [1:0]
      New ports: A=\decode.ecause_out_reg [1], B=1'1, Y=$auto$wreduce.cc:461:run$2479 [1]
      New connections: $auto$wreduce.cc:461:run$2479 [0] = 1'0
  Optimizing cells in module \core.
Performed a total of 1 changes.

37.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

37.22. Executing OPT_SHARE pass.

37.23. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$2190 ($sdff) from module core.

37.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

37.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~1 debug messages>

37.26. Rerunning OPT passes. (Maybe there is more to do..)

37.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

37.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
    Consolidated identical input bits for $mux cell $flatten\memory.$ternary$/openlane/designs/core/src/core.v:2213$304:
      Old ports: A={ 1'0 \execute.ecause_out_reg [1] 1'0 }, B={ 1'1 \memory._ecause_out_T [1] 1'0 }, Y=\memory._GEN_1 [2:0]
      New ports: A={ 1'0 \execute.ecause_out_reg [1] }, B={ 1'1 \memory._ecause_out_T [1] }, Y=\memory._GEN_1 [2:1]
      New connections: \memory._GEN_1 [0] = 1'0
  Optimizing cells in module \core.
Performed a total of 1 changes.

37.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

37.30. Executing OPT_SHARE pass.

37.31. Executing OPT_DFF pass (perform DFF optimizations).

37.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

37.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

37.34. Rerunning OPT passes. (Maybe there is more to do..)

37.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

37.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

37.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

37.38. Executing OPT_SHARE pass.

37.39. Executing OPT_DFF pass (perform DFF optimizations).

37.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

37.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

37.42. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$e3e2a2ae1e4d598b5e0e0be67cc1104653ecf8c1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using template $paramod$44a13d10af618e7fbe7b9aad2f6151ffcee1e2fa\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$335cfd09f1afa8139c4aafcbbe5f361887b79c5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$feecc7a0dbd012970970f2858f15e786e251f677\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$e765c459d3029c22a22a27989e94858fd9ebfa9c\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$cc80a4e89b0341cb117f5d28b0e7244620640141\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000001000000 for cells of type $lcu.
No more expansions possible.
<suppressed ~5191 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~7701 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~5619 debug messages>
Removed a total of 1873 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 499 unused cells and 2607 unused wires.
<suppressed ~508 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\core' to `<abc-temp-dir>/input.blif'..
Replacing 69 occurrences of constant undef bits with constant zero bits
Extracted 9926 gates and 12771 wires to a netlist network with 2842 inputs and 633 outputs.

40.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:     6224
ABC RESULTS:               NOT cells:      532
ABC RESULTS:              NAND cells:      201
ABC RESULTS:             ORNOT cells:      188
ABC RESULTS:               NOR cells:      170
ABC RESULTS:               AND cells:      231
ABC RESULTS:              XNOR cells:       52
ABC RESULTS:               XOR cells:      413
ABC RESULTS:            ANDNOT cells:     1003
ABC RESULTS:                OR cells:     1033
ABC RESULTS:        internal signals:     9296
ABC RESULTS:           input signals:     2842
ABC RESULTS:          output signals:      633
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.
<suppressed ~954 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 10 unused cells and 5011 unused wires.
<suppressed ~388 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \core

42.2. Analyzing design hierarchy..
Top module:  \core
Removed 0 unused modules.

43. Printing statistics.

=== core ===

   Number of wires:              10549
   Number of wire bits:          20124
   Number of public wires:         803
   Number of public wire bits:   10373
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              12988
     $_ANDNOT_                    1001
     $_AND_                        231
     $_DFFE_PP_                    960
     $_DFF_P_                       16
     $_MUX_                       6224
     $_NAND_                       201
     $_NOR_                        169
     $_NOT_                        522
     $_ORNOT_                      188
     $_OR_                        1032
     $_SDFFE_PP0N_                  90
     $_SDFFE_PP0P_                1159
     $_SDFFE_PP1N_                   1
     $_SDFF_PP0_                   728
     $_SDFF_PP1_                     1
     $_XNOR_                        52
     $_XOR_                        413

44. Executing CHECK pass (checking for obvious problems).
Checking module core...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/core/runs/core/tmp/synthesis/post_techmap.dot'.
Dumping module core to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \core..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \core.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\core'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module core.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 0 unused cells and 577 unused wires.
<suppressed ~577 debug messages>

49. Printing statistics.

=== core ===

   Number of wires:               9972
   Number of wire bits:          13331
   Number of public wires:         226
   Number of public wire bits:    3580
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              12988
     $_ANDNOT_                    1001
     $_AND_                        231
     $_DFFE_PP_                    960
     $_DFF_P_                       16
     $_MUX_                       6224
     $_NAND_                       201
     $_NOR_                        169
     $_NOT_                        522
     $_ORNOT_                      188
     $_OR_                        1032
     $_SDFFE_PP0N_                  90
     $_SDFFE_PP0P_                1159
     $_SDFFE_PP1N_                   1
     $_SDFF_PP0_                   728
     $_SDFF_PP1_                     1
     $_XNOR_                        52
     $_XOR_                        413

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /Business/EDA_wx_company/jli/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/Business/EDA_wx_company/jli/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /Business/EDA_wx_company/jli/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/Business/EDA_wx_company/jli/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\core':
  mapped 2955 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== core ===

   Number of wires:              14161
   Number of wire bits:          17520
   Number of public wires:         226
   Number of public wire bits:    3580
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              17177
     $_ANDNOT_                    1001
     $_AND_                        231
     $_MUX_                      10413
     $_NAND_                       201
     $_NOR_                        169
     $_NOT_                        522
     $_ORNOT_                      188
     $_OR_                        1032
     $_XNOR_                        52
     $_XOR_                        413
     sky130_fd_sc_hd__dfxtp_2     2955

[INFO]: USING STRATEGY DELAY 1

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\core' to `/tmp/yosys-abc-nh56Gq/input.blif'..
Extracted 14222 gates and 17213 wires to a netlist network with 2989 inputs and 2956 outputs.

56.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-nh56Gq/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-nh56Gq/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-nh56Gq/input.blif 
ABC: + read_lib -w /openlane/designs/core/runs/core/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.14 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/core/runs/core/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.19 sec
ABC: Memory =    9.54 MB. Time =     0.19 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/core/runs/core/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/core/runs/core/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 8000.0 -M 6 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + map -p -B 0.2 -A 0.9 -M 0 
ABC: The cell areas are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.20).
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + map 
ABC: + 
ABC: + retime -D -D 8000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 8000.0 
ABC: Current delay (5534.98 ps) does not exceed the target delay (8000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 8000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =  13494 ( 23.8 %)   Cap = 12.3 ff (  6.6 %)   Area =   113968.05 ( 74.7 %)   Delay =  6050.06 ps  (  0.5 %)               
ABC: Path  0 --    1354 : 0    5 pi                         A =   0.00  Df =  48.9  -27.1 ps  S =  73.6 ps  Cin =  0.0 ff  Cout =  14.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    6013 : 1   10 sky130_fd_sc_hd__buf_1     A =   3.75  Df = 325.9 -128.2 ps  S = 316.9 ps  Cin =  2.1 ff  Cout =  26.4 ff  Cmax = 130.0 ff  G = 1211  
ABC: Path  2 --   10821 : 2    2 sky130_fd_sc_hd__or2b_2    A =   8.76  Df = 542.7  -23.9 ps  S =  70.3 ps  Cin =  1.6 ff  Cout =   9.3 ff  Cmax = 312.2 ff  G =  568  
ABC: Path  3 --   10825 : 5    3 sky130_fd_sc_hd__o2111ai_2 A =  15.01  Df = 685.9  -13.2 ps  S = 263.7 ps  Cin =  4.3 ff  Cout =  14.3 ff  Cmax = 129.1 ff  G =  312  
ABC: Path  4 --   10836 : 3    7 sky130_fd_sc_hd__o21ai_2   A =   8.76  Df = 971.6  -65.4 ps  S = 251.2 ps  Cin =  4.5 ff  Cout =  19.0 ff  Cmax = 139.2 ff  G =  395  
ABC: Path  5 --   10837 : 1   10 sky130_fd_sc_hd__buf_1     A =   3.75  Df =1301.7 -181.7 ps  S = 347.5 ps  Cin =  2.1 ff  Cout =  29.2 ff  Cmax = 130.0 ff  G = 1321  
ABC: Path  6 --   10838 : 1   10 sky130_fd_sc_hd__buf_1     A =   3.75  Df =1657.7 -295.0 ps  S = 371.8 ps  Cin =  2.1 ff  Cout =  31.4 ff  Cmax = 130.0 ff  G = 1418  
ABC: Path  7 --   10839 : 1   10 sky130_fd_sc_hd__buf_1     A =   3.75  Df =2061.2 -431.9 ps  S = 438.1 ps  Cin =  2.1 ff  Cout =  37.2 ff  Cmax = 130.0 ff  G = 1672  
ABC: Path  8 --   10970 : 4    2 sky130_fd_sc_hd__a2bb2o_2  A =  11.26  Df =2383.1 -462.5 ps  S =  62.2 ps  Cin =  1.7 ff  Cout =   7.3 ff  Cmax = 300.3 ff  G =  394  
ABC: Path  9 --   10971 : 4    8 sky130_fd_sc_hd__a211oi_2  A =  12.51  Df =2766.1 -775.6 ps  S = 473.5 ps  Cin =  4.4 ff  Cout =  24.1 ff  Cmax =  88.8 ff  G =  527  
ABC: Path 10 --   10976 : 2    2 sky130_fd_sc_hd__nor2_2    A =   6.26  Df =2857.4 -620.1 ps  S = 106.9 ps  Cin =  4.4 ff  Cout =   6.5 ff  Cmax = 141.9 ff  G =  138  
ABC: Path 11 --   10978 : 2    1 sky130_fd_sc_hd__or2b_2    A =   8.76  Df =3148.9 -114.2 ps  S =  49.1 ps  Cin =  1.6 ff  Cout =   2.2 ff  Cmax = 312.2 ff  G =  134  
ABC: Path 12 --   10979 : 1    8 sky130_fd_sc_hd__buf_1     A =   3.75  Df =3338.1  -26.6 ps  S = 339.6 ps  Cin =  2.1 ff  Cout =  28.5 ff  Cmax = 130.0 ff  G = 1295  
ABC: Path 13 --   10980 : 2    3 sky130_fd_sc_hd__nor2_2    A =   6.26  Df =3497.7 -104.7 ps  S = 131.7 ps  Cin =  4.4 ff  Cout =   9.2 ff  Cmax = 141.9 ff  G =  197  
ABC: Path 14 --   11017 : 4    3 sky130_fd_sc_hd__or4bb_2   A =  12.51  Df =4134.7 -536.0 ps  S = 107.9 ps  Cin =  1.5 ff  Cout =   6.6 ff  Cmax = 312.2 ff  G =  415  
ABC: Path 15 --   11374 : 4    1 sky130_fd_sc_hd__o31a_2    A =  10.01  Df =4712.0 -735.4 ps  S =  46.1 ps  Cin =  2.3 ff  Cout =   1.6 ff  Cmax = 285.7 ff  G =   63  
ABC: Path 16 --   11390 : 4    1 sky130_fd_sc_hd__or4b_2    A =  10.01  Df =5325.5 -153.8 ps  S = 107.8 ps  Cin =  1.5 ff  Cout =   4.6 ff  Cmax = 265.5 ff  G =  302  
ABC: Path 17 --   11499 : 3    2 sky130_fd_sc_hd__a21oi_2   A =   8.76  Df =5733.3 -438.1 ps  S = 446.0 ps  Cin =  4.6 ff  Cout =  35.9 ff  Cmax = 128.2 ff  G =  784  
ABC: Path 18 --   12450 : 4    1 sky130_fd_sc_hd__o22a_2    A =  10.01  Df =6050.1 -442.6 ps  S = 178.3 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 304.9 ff  G = 1417  
ABC: Start-point = pi1353 (\decode.io_wb_rd [2]).  End-point = po617 ($auto$rtlil.cc:2669:MuxGate$37766).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 2989/ 2956  lat =    0  nd = 13494  edge =  39203  area =45948.21  delay =3974.49  lev = 32
ABC: + write_blif /tmp/yosys-abc-nh56Gq/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o41ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:      215
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:      120
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:       51
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       94
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       90
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:       54
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:       65
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:       42
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:       71
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:      180
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:       45
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:       62
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       56
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      187
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:      191
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:      226
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:      353
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:      117
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:      267
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:      103
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:      147
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:       66
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:      318
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:       80
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       88
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:      107
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:      404
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:      233
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:      191
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:      143
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:      100
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      182
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:       53
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:      105
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       90
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       49
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1258
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      213
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:      140
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       81
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:      427
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:      180
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     3123
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:     1250
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:     1368
ABC RESULTS:        internal signals:    11268
ABC RESULTS:           input signals:     2989
ABC RESULTS:          output signals:     2956
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \core..
Removed 94 unused cells and 17581 unused wires.
<suppressed ~656 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module core...
Found and reported 0 problems.

63. Printing statistics.

=== core ===

   Number of wires:              16360
   Number of wire bits:          16516
   Number of public wires:        2863
   Number of public wire bits:    3019
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              16449
     sky130_fd_sc_hd__a2111o_2      42
     sky130_fd_sc_hd__a2111oi_2     14
     sky130_fd_sc_hd__a211o_2      191
     sky130_fd_sc_hd__a211oi_2     107
     sky130_fd_sc_hd__a21bo_2       15
     sky130_fd_sc_hd__a21boi_2       4
     sky130_fd_sc_hd__a21o_2       147
     sky130_fd_sc_hd__a21oi_2      318
     sky130_fd_sc_hd__a221o_2      226
     sky130_fd_sc_hd__a221oi_2      80
     sky130_fd_sc_hd__a22o_2       117
     sky130_fd_sc_hd__a22oi_2       54
     sky130_fd_sc_hd__a2bb2o_2      56
     sky130_fd_sc_hd__a2bb2oi_2     10
     sky130_fd_sc_hd__a311o_2       45
     sky130_fd_sc_hd__a311oi_2      18
     sky130_fd_sc_hd__a31o_2       404
     sky130_fd_sc_hd__a31oi_2       28
     sky130_fd_sc_hd__a32o_2        94
     sky130_fd_sc_hd__a32oi_2        1
     sky130_fd_sc_hd__a41o_2       103
     sky130_fd_sc_hd__a41oi_2        4
     sky130_fd_sc_hd__and2_2       140
     sky130_fd_sc_hd__and2b_2       81
     sky130_fd_sc_hd__and3_2       427
     sky130_fd_sc_hd__and3b_2       62
     sky130_fd_sc_hd__and4_2       180
     sky130_fd_sc_hd__and4b_2       40
     sky130_fd_sc_hd__and4bb_2      66
     sky130_fd_sc_hd__buf_1       3123
     sky130_fd_sc_hd__buf_2          1
     sky130_fd_sc_hd__dfxtp_2     2955
     sky130_fd_sc_hd__inv_2         90
     sky130_fd_sc_hd__mux2_2      1258
     sky130_fd_sc_hd__mux4_2       187
     sky130_fd_sc_hd__nand2_2     1250
     sky130_fd_sc_hd__nand2b_2       6
     sky130_fd_sc_hd__nand3_2       27
     sky130_fd_sc_hd__nand3b_2      11
     sky130_fd_sc_hd__nand4_2       32
     sky130_fd_sc_hd__nand4b_2       6
     sky130_fd_sc_hd__nor2_2       213
     sky130_fd_sc_hd__nor2b_2        5
     sky130_fd_sc_hd__nor3_2        40
     sky130_fd_sc_hd__nor3b_2        4
     sky130_fd_sc_hd__nor4_2        23
     sky130_fd_sc_hd__o2111a_2     215
     sky130_fd_sc_hd__o2111ai_2     12
     sky130_fd_sc_hd__o211a_2     1368
     sky130_fd_sc_hd__o211ai_2      71
     sky130_fd_sc_hd__o21a_2       233
     sky130_fd_sc_hd__o21ai_2      267
     sky130_fd_sc_hd__o21ba_2       32
     sky130_fd_sc_hd__o21bai_2      17
     sky130_fd_sc_hd__o221a_2      353
     sky130_fd_sc_hd__o221ai_2      65
     sky130_fd_sc_hd__o22a_2       191
     sky130_fd_sc_hd__o22ai_2       51
     sky130_fd_sc_hd__o2bb2a_2      88
     sky130_fd_sc_hd__o2bb2ai_2     11
     sky130_fd_sc_hd__o311a_2      143
     sky130_fd_sc_hd__o311ai_2       2
     sky130_fd_sc_hd__o31a_2       100
     sky130_fd_sc_hd__o31ai_2        7
     sky130_fd_sc_hd__o32a_2       120
     sky130_fd_sc_hd__o41a_2        38
     sky130_fd_sc_hd__o41ai_2        1
     sky130_fd_sc_hd__or2_2        182
     sky130_fd_sc_hd__or2b_2        52
     sky130_fd_sc_hd__or3_2         90
     sky130_fd_sc_hd__or3b_2       105
     sky130_fd_sc_hd__or4_2        180
     sky130_fd_sc_hd__or4b_2        53
     sky130_fd_sc_hd__or4bb_2       14
     sky130_fd_sc_hd__xnor2_2       49
     sky130_fd_sc_hd__xor2_2        34

   Chip area for module '\core': 176822.086400

64. Executing Verilog backend.
Dumping module `\core'.

65. Executing JSON backend.

End of script. Logfile hash: f7445f6b5e, CPU: user 18.10s system 0.29s, MEM: 93.32 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 71% 2x abc (43 sec), 8% 41x opt_expr (5 sec), ...
